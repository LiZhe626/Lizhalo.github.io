<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python基础学习</title>
      <link href="/2022/05/28/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/28/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="1-运用方面"><a href="#1-运用方面" class="headerlink" title="1.运用方面"></a>1.运用方面</h2><p>爬虫、大数据、测试、Web、AI、脚本处理</p><h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h2><p>简洁、灵活、优雅、哲学</p><p>易于上手难于精通</p><p>既有动态脚本的特性，又有面向对象的特性</p><h2 id="3-基本数据类型"><a href="#3-基本数据类型" class="headerlink" title="3.基本数据类型"></a>3.基本数据类型</h2><p>整数：int</p><p>浮点数：float</p><p>其他语言：单精度（float） ，双精度（double）</p><p>其他语言：short，int，long</p><p>利用type() 来查看变量类型</p><h2 id="4-进制"><a href="#4-进制" class="headerlink" title="4.进制"></a>4.进制</h2><p>10进制，2进制，8进制，16进制</p><h3 id="2进制"><a href="#2进制" class="headerlink" title="2进制"></a>2进制</h3><p>ob表示<br>eg:0b10 表示2</p><h3 id="8进制"><a href="#8进制" class="headerlink" title="8进制"></a>8进制</h3><p>0o表示<br>eg:0o11 表示9</p><h3 id="16进制"><a href="#16进制" class="headerlink" title="16进制"></a>16进制</h3><p>0x表示<br>eg:0x1F 表示31</p><h3 id="进制的转换"><a href="#进制的转换" class="headerlink" title="进制的转换"></a>进制的转换</h3><table><thead><tr><th align="center"></th><th align="center">2进制</th><th align="center">8进制</th><th align="center">10进制</th><th align="center">16进制</th></tr></thead><tbody><tr><td align="center">2进制</td><td align="center">-</td><td align="center">bin(int(n,8))</td><td align="center">bin(int(n,10))</td><td align="center">bin(int(n,16))</td></tr><tr><td align="center">8进制</td><td align="center">oct(int(n,2))</td><td align="center">-</td><td align="center">oct(int(n,10))</td><td align="center">oct(int(n,16))</td></tr><tr><td align="center">10进制</td><td align="center">int(n,2)</td><td align="center">int(n,8)</td><td align="center">-</td><td align="center">int(n,16)</td></tr><tr><td align="center">16进制</td><td align="center">hex(int(n,2))</td><td align="center">hex(int(n,8))</td><td align="center">hex(int(n,10))</td><td align="center">-</td></tr></tbody></table><h4 id="1-其他进制转换成2进制："><a href="#1-其他进制转换成2进制：" class="headerlink" title="1.其他进制转换成2进制："></a>1.其他进制转换成2进制：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(n,<span class="number">8</span>)))</span><br></pre></td></tr></table></figure><p>输入：1010<br>输出：0b1000001000</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(n))</span><br></pre></td></tr></table></figure><p>输入：10<br>输出：0b1010</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(n,<span class="number">16</span>)))</span><br></pre></td></tr></table></figure><p>输入：a<br>输出：0b1010</p><h4 id="2-其他进制转换成8进制："><a href="#2-其他进制转换成8进制：" class="headerlink" title="2.其他进制转换成8进制："></a>2.其他进制转换成8进制：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="built_in">int</span>(n,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><p>输入: 1010<br>输出: 0o12</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(n))</span><br></pre></td></tr></table></figure><p>输入：10<br>输出：0o12</p><h4 id="3-其他进制转换成10进制："><a href="#3-其他进制转换成10进制：" class="headerlink" title="3.其他进制转换成10进制："></a>3.其他进制转换成10进制：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>((<span class="built_in">int</span>(n,<span class="number">16</span>)))</span><br></pre></td></tr></table></figure><p>输入：a<br>输出：10</p><h4 id="4-其他进制转换成16进制："><a href="#4-其他进制转换成16进制：" class="headerlink" title="4.其他进制转换成16进制："></a>4.其他进制转换成16进制：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(n))</span><br></pre></td></tr></table></figure><p>输入：10<br>输出：0xa</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="2-1什么是变量"><a href="#2-1什么是变量" class="headerlink" title="2.1什么是变量"></a>2.1什么是变量</h2><h3 id="1-一些注意点："><a href="#1-一些注意点：" class="headerlink" title="1.一些注意点："></a>1.一些注意点：</h3><p>1.=代表赋值</p><p>2.用简洁的单词 赋予其意义</p><p>3.用id函数查看变量的地址</p><h3 id="2-例子"><a href="#2-例子" class="headerlink" title="2.例子"></a>2.例子</h3><p>A=[1,2,3,4,5]</p><p>B=[1,2,3]</p><p>print(A*3+B+A)</p><p>-&gt;[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3, 4, 5]</p><h2 id="2-2变量命名"><a href="#2-2变量命名" class="headerlink" title="2.2变量命名"></a>2.2变量命名</h2><p>字母、数字、下划线</p><p>【注意】</p><p>1.不能以数字开头</p><p>2.系统关键字不能用在变量名中</p><p>3.区分大小写</p><p>关键字</p><table><thead><tr><th align="center">False</th><th align="center">def</th><th align="center">if</th><th align="center">raise</th></tr></thead><tbody><tr><td align="center">None</td><td align="center">del</td><td align="center">import</td><td align="center">return</td></tr><tr><td align="center">True</td><td align="center">elif</td><td align="center">in</td><td align="center">try</td></tr><tr><td align="center">and</td><td align="center">else</td><td align="center">is</td><td align="center">while</td></tr><tr><td align="center">as</td><td align="center">except</td><td align="center">lambda</td><td align="center">with</td></tr><tr><td align="center">assert</td><td align="center">finally</td><td align="center">nonlocal</td><td align="center">yield</td></tr><tr><td align="center">break</td><td align="center">for</td><td align="center">not</td><td align="center"></td></tr><tr><td align="center">class</td><td align="center">from</td><td align="center">or</td><td align="center"></td></tr><tr><td align="center">continue</td><td align="center">global</td><td align="center">pass</td><td align="center"></td></tr></tbody></table><h2 id="2-3值类型和引用类型"><a href="#2-3值类型和引用类型" class="headerlink" title="2.3值类型和引用类型"></a>2.3值类型和引用类型</h2><p>int  str tuple 值类型（不可改变）         list set dict (可变)引用类型</p><p>【注意】字符串是不可改变的类型</p><h2 id="2-4列表的可变与元组的不可变"><a href="#2-4列表的可变与元组的不可变" class="headerlink" title="2.4列表的可变与元组的不可变"></a>2.4列表的可变与元组的不可变</h2><p>对于元组（），不可追加也不可修改。</p><h2 id="2-5运算符号"><a href="#2-5运算符号" class="headerlink" title="2.5运算符号"></a>2.5运算符号</h2><h3 id="1-常见的数值运算"><a href="#1-常见的数值运算" class="headerlink" title="1.常见的数值运算"></a>1.常见的数值运算</h3><p>1.加法</p><p>5+6   -&gt;11</p><p>2.减法</p><p>3-1    -&gt; 2</p><p>3.乘法</p><p>4*7    -&gt;28</p><p>4.浮点除法</p><p>3/2    -&gt; 1.5</p><p>5.整数除法</p><p>3//2   -&gt; 1</p><p>6.求余数（判断是否能整除）</p><p>5%2   -&gt; 1</p><p>7.幂指数</p><p>2**2  -&gt; 4(2的2次方)</p><p>2**5  -&gt;32(2的5次方)</p><p>8.数学库</p><table><thead><tr><th align="left">函数/常数</th><th>功能</th></tr></thead><tbody><tr><td align="left">e</td><td>自然常数</td></tr><tr><td align="left">pi</td><td>圆周率</td></tr><tr><td align="left">log(x[,base])</td><td>返回以base为底的对数，缺省为e</td></tr><tr><td align="left">pow(x,y)</td><td>返回x的y次方</td></tr><tr><td align="left">sqrt(x)</td><td>返回x的平方根</td></tr><tr><td align="left">fabs(x)</td><td>返回x的绝对值</td></tr><tr><td align="left">round(x[,n])</td><td>返回浮点数x的四舍五入值，n代表舍入到小数点后的位数</td></tr><tr><td align="left">divmod(x,y)</td><td>返回x和y的商和余数</td></tr></tbody></table><p>开平方</p><p>import math</p><p>math.sqrt(4)</p><p>2.0</p><h3 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h3><p>1.=</p><p>eg:c=1</p><p>把1赋值给变量c</p><p>2.+=</p><p>3.-=</p><p>4.*=</p><p>5./=</p><p>6.%=</p><p>7.**=</p><p>8.//=</p><h3 id="3-比较（关系）运算符"><a href="#3-比较（关系）运算符" class="headerlink" title="3.比较（关系）运算符"></a>3.比较（关系）运算符</h3><p>1.==</p><p>1==1  -&gt; true</p><p>2.！=</p><p>3.&gt;</p><p>4.&lt;</p><p>5.&gt;=</p><p>6.&lt;=</p><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b=<span class="number">1</span></span><br><span class="line">b+=b&gt;=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">True</span>))</span><br><span class="line">-&gt;</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>[注意]字符串和数字不能比较</p><h3 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h3><p>（布尔类型）</p><p>1.and（与） 全真为真</p><p>2.or（或）    有真则真</p><p>3.not（非）</p><p>int float 0 被认为是false 非0 表示true</p><p>空字符串代表false 否则为true</p><p>eg:not ‘0’ -&gt;false</p><p>空的列表代表false 否则为true</p><h3 id="5-成员运算符"><a href="#5-成员运算符" class="headerlink" title="5.成员运算符"></a>5.成员运算符</h3><p>判断一个元素是否在另外一组元素里</p><p>返回值是布尔类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">a <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">-&gt; <span class="literal">True</span></span><br><span class="line">b=<span class="number">6</span></span><br><span class="line">b <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">-&gt; <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="6-身份运算符"><a href="#6-身份运算符" class="headerlink" title="6.身份运算符"></a>6.身份运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">1.0</span></span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">-&gt; <span class="literal">False</span></span><br><span class="line">a == b</span><br><span class="line">-&gt; <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>一个变量的身份是否与另一个变量的身份相同</p><p>is    not is</p><p>eg:元组是有序的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b=&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;</span><br><span class="line">a==b</span><br><span class="line">-&gt; <span class="literal">True</span></span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">-&gt; <span class="literal">False</span></span><br><span class="line">c=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">d=(<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">c==d</span><br><span class="line">-&gt; <span class="literal">False</span></span><br><span class="line">c <span class="keyword">is</span> d</span><br><span class="line">-&gt; <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>判断类型</p><p>函数 isinstance()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">isinstance</span>(a,<span class="built_in">str</span>)</span><br><span class="line">-&gt; <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>对象的三个特征</p><p>id,value,type</p><h3 id="7-位运算符"><a href="#7-位运算符" class="headerlink" title="7.位运算符"></a>7.位运算符</h3><p>把数字当作二进制数进行运算</p><p>按位与&amp;</p><p>按位或|</p><p>按位异或^</p><p>按位取反~</p><p>左移动&lt;&lt;</p><p>右移动&gt;&gt;</p><h3 id="8-优先级和结合性"><a href="#8-优先级和结合性" class="headerlink" title="8.优先级和结合性"></a>8.优先级和结合性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>+<span class="number">5</span>*<span class="number">4</span> <span class="comment">#先乘后加</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">5</span>*<span class="number">3</span>/<span class="number">2</span> <span class="comment">#从左向右</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"><span class="number">2</span>**<span class="number">3</span>**<span class="number">2</span> <span class="comment">#从右向左</span></span><br><span class="line"><span class="number">512</span></span><br><span class="line"><span class="number">3</span>&lt;<span class="number">5</span> <span class="keyword">or</span> a&gt;<span class="number">3</span> <span class="comment">#从左向右</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="3-1输入函数和输出函数"><a href="#3-1输入函数和输出函数" class="headerlink" title="3.1输入函数和输出函数"></a>3.1输入函数和输出函数</h2><h3 id="1-输入函数input"><a href="#1-输入函数input" class="headerlink" title="1.输入函数input()"></a>1.输入函数input()</h3><p>读取整数</p><p>用int()函数强制转换类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>一行输入多个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;m,n=<span class="built_in">input</span>(<span class="string">&quot;请输入多个值：&quot;</span>).split()</span><br><span class="line">请输入多个值：<span class="number">3</span> <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;m</span><br><span class="line"><span class="string">&#x27;3&#x27;</span></span><br><span class="line">&gt;&gt;&gt;n</span><br><span class="line"><span class="string">&#x27;5&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-输出函数print"><a href="#2-输出函数print" class="headerlink" title="2.输出函数print()"></a>2.输出函数print()</h3><h4 id="2-1格式化输出"><a href="#2-1格式化输出" class="headerlink" title="2.1格式化输出"></a>2.1格式化输出</h4><p>1.整数的输出：</p><p>%o 八进制</p><p>%d 十进制</p><p>%x 十六进制</p><p>2.浮点数的输出</p><p>（1）格式化输出：</p><ul><li>%f 保留小数点后六位有效数字，%.3f，保留三位小数</li><li>%e 保留小数点后六位有效数字，指数形式输出，%.3e，保留三位小数，使用科学计数法</li><li>%g 在保证六位有效数字的前提下，使用小数方式，否则使用科学计数法，%.3g，保留三位小数，使用小数或者科学计数法</li></ul><p>（2）字符串输出：</p><p>%10s 右对齐，占位符10位</p><p>%-10s 左对齐，占位符10位</p><p>%.2s截取两位字符串</p><p>%10.2s 10位占位符，截取两位字符串</p><p>3.常用转义字符</p><table><thead><tr><th align="center">转义字符</th><th align="center">描述</th><th align="center">转义字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">续行符，在行未</td><td align="center">\\</td><td align="center">反斜杠符号</td></tr><tr><td align="center">\‘</td><td align="center">单引号</td><td align="center">\“</td><td align="center">双引号</td></tr><tr><td align="center">\a</td><td align="center">响铃（电脑提示音）</td><td align="center">\b</td><td align="center">退格</td></tr><tr><td align="center">\e</td><td align="center">转义</td><td align="center">\000</td><td align="center">空</td></tr><tr><td align="center">\n</td><td align="center">换行</td><td align="center">\v</td><td align="center">纵向制表符</td></tr><tr><td align="center">\t</td><td align="center">横向制表符</td><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\f</td><td align="center">换页</td><td align="center">\oyy</td><td align="center">八进制数yy代表的字符</td></tr><tr><td align="center">\xyy</td><td align="center">十进制数yy代表的字符</td><td align="center">\other</td><td align="center">其他字符以普通格式输出</td></tr></tbody></table><p>4.format的用法</p><p>相对基本格式化输出采用‘%’的方法，format()功能更强大，该函数把字符串当成一个模板，通过传入的参数进行格式化，并且使用大括号‘{}’作为特殊字符代替‘%’</p><h3 id="3-例子"><a href="#3-例子" class="headerlink" title="3.例子"></a>3.例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">b=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">c=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s=(a+b+c)/<span class="number">2</span></span><br><span class="line">area=math.sqrt(s*(s-a)*(s-b)*(s-c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;三角形的边长&quot;</span>,a,b,c,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;三角形的面积&quot;</span>,area)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">三角形的边长 <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>三角形的面积 <span class="number">14.696938456699069</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.forward(<span class="number">200</span>)</span><br><span class="line">turtle.right(<span class="number">144</span>)</span><br><span class="line">turtle.forward(<span class="number">200</span>)</span><br><span class="line">turtle.right(<span class="number">144</span>)</span><br><span class="line">turtle.forward(<span class="number">200</span>)</span><br><span class="line">turtle.right(<span class="number">144</span>)</span><br><span class="line">turtle.forward(<span class="number">200</span>)</span><br><span class="line">turtle.right(<span class="number">144</span>)</span><br><span class="line">turtle.forward(<span class="number">200</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="4-1数字类型"><a href="#4-1数字类型" class="headerlink" title="4.1数字类型"></a>4.1数字类型</h2><h3 id="1-整数"><a href="#1-整数" class="headerlink" title="1.整数"></a>1.整数</h3><h3 id="2-浮点数（float）"><a href="#2-浮点数（float）" class="headerlink" title="2.浮点数（float）"></a>2.浮点数（float）</h3><p>浮点数运算存在不确定尾数，有误差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">0.1</span>+<span class="number">0.2</span>,<span class="number">2</span>)==<span class="number">0.3</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="3-复数"><a href="#3-复数" class="headerlink" title="3.复数"></a>3.复数</h3><p>​     2+3j</p><p>实部  虚部</p><p>real方法取实部</p><p>imag方法取虚部</p><p>complex（）函数可用于创建一个值为real+imag*j的复数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">complex</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br></pre></td></tr></table></figure><h2 id="4-2序列"><a href="#4-2序列" class="headerlink" title="4.2序列"></a>4.2序列</h2><p>常用序列类型：列表（list)    字符串（string） 元组（tuple)</p><p>通用序列操作</p><table><thead><tr><th align="center">操作</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x1+x2</td><td align="center">联接序列X1和X2，生成新序列</td></tr><tr><td align="center">X*n</td><td align="center">序列X重复n次，生成新序列</td></tr><tr><td align="center">X[i]</td><td align="center">引用序列X中下标为i的成员</td></tr><tr><td align="center">X[i: j]</td><td align="center">引用序列X中下标为i到j-1的子序列</td></tr><tr><td align="center">X[i:j:k]</td><td align="center">引用序列X中下标为i到j-1的子序列，步长为k</td></tr><tr><td align="center">len(X)</td><td align="center">计算序列X中成员的个数</td></tr><tr><td align="center">max(X)</td><td align="center">序列X中的最大值</td></tr><tr><td align="center">min(X)</td><td align="center">序列X中的最小值</td></tr><tr><td align="center">v in X</td><td align="center">检查v是否在序列X中，返回布尔值</td></tr><tr><td align="center">v not in X</td><td align="center">检查v是否不在序列X中，返回布尔值</td></tr></tbody></table><h2 id="4-3字符串"><a href="#4-3字符串" class="headerlink" title="4.3字符串"></a>4.3字符串</h2><h3 id="1-字符串基本定义"><a href="#1-字符串基本定义" class="headerlink" title="1.字符串基本定义"></a>1.字符串基本定义</h3><p>引号括起来的任意文本，是一个有序序列</p><p>表示形式：</p><p>单引号：‘abc’</p><p>双引号：“abc”</p><p>三引号：‘’‘hello</p><p>​                 world’’’</p><p>三引号表示多行文本</p><p>【注意】字符串这种对象并不支持元素的赋值</p><h3 id="2-字符串运算符"><a href="#2-字符串运算符" class="headerlink" title="2.字符串运算符"></a>2.字符串运算符</h3><p>连接字符串 +</p><p>复制字符串 *</p><h3 id="3-字符串切片"><a href="#3-字符串切片" class="headerlink" title="3.字符串切片"></a>3.字符串切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&quot;asdfgh&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[-<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;g&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"><span class="string">&#x27;sdfg&#x27;</span></span><br><span class="line"><span class="comment">#在1的前面和5的前面各切一刀</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>’26C’[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">’<span class="number">26</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">#[0:-1]即把最后一个字符去掉</span></span><br><span class="line"><span class="string">#用切片倒转字符串</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; s=&quot;abcd&quot;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; s[::-1]</span></span><br><span class="line"><span class="string">&#x27;</span>dcba<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-转义字符"><a href="#4-转义字符" class="headerlink" title="4.转义字符"></a>4.转义字符</h3><p>制表符\t</p><p>换行符\n</p><p>多行表示一个字符串 反斜杠\</p><h3 id="5-字符串常用方法或函数"><a href="#5-字符串常用方法或函数" class="headerlink" title="5.字符串常用方法或函数"></a>5.字符串常用方法或函数</h3><table><thead><tr><th align="center">字符串常用方法或函数</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">S.title()</td><td align="center">字符串S首字母大写</td></tr><tr><td align="center">S.lower()</td><td align="center">字符串S变小写</td></tr><tr><td align="center">S.upper()</td><td align="center">字符串S变大写</td></tr><tr><td align="center">S.strip(),S.rstrip(),lstrip()</td><td align="center">删除前后空格，删除右空格，删除左空格</td></tr><tr><td align="center">S.find(sub[,start[,end]])</td><td align="center">在字符串S中查找sub子串首次出现的位置</td></tr><tr><td align="center">S.replace(old,new)</td><td align="center">在字符串S中用new子串替换old子串</td></tr><tr><td align="center">S.join(X)</td><td align="center">将序列X合并成字符串</td></tr><tr><td align="center">S.split(sep=None)</td><td align="center">将字符串S拆分成列表</td></tr><tr><td align="center">S.count(sub[,start[,end]])</td><td align="center">计算sub子串在字符串S中出现的次数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#转为小写lower</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;Join Smith&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1=s.lower()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1</span><br><span class="line"><span class="string">&#x27;join smith&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#find函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">&#x27;in&#x27;</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="comment">#可指定查找开始位置和结束位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">&#x27;lo&#x27;</span>,<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment">#找不到为-1</span></span><br><span class="line"><span class="comment">#用in只能知4道它是否在字符串里</span></span><br><span class="line"><span class="comment">#而用find 可知具体位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;o&#x27;</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#count函数 统计出现个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;hello world&quot;</span>.count(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;hello world&quot;</span>.count(<span class="string">&#x27;lo&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#strip函数 去除字符串空格</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&quot; hello world &quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.strip()</span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lstrip()</span><br><span class="line"><span class="string">&#x27;hello world &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rstrip()</span><br><span class="line"><span class="string">&#x27; hello world&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#replace函数 取代</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;-hello-world-&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;helloworld&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#str函数 转化为字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">123</span>)</span><br><span class="line"><span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">123.456</span>)</span><br><span class="line"><span class="string">&#x27;123.456&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串格式化运算符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;I am %d year old and weight %d kg.&quot;</span> % (<span class="number">18</span>,<span class="number">50</span>)</span><br><span class="line"><span class="string">&#x27;I am 18 year old and weight 50 kg.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;it is %.1fC.&#x27;</span>%<span class="number">30.579</span></span><br><span class="line"><span class="string">&#x27;it is 30.6C.&#x27;</span></span><br></pre></td></tr></table></figure><p>Python字符串的格式占位符</p><table><thead><tr><th align="center">占位符</th><th>含义</th></tr></thead><tbody><tr><td align="center">%c</td><td>单个字符，替换成只有一个字符的字符串或将表示一个字符的Unicode码转成一个字符替换进来</td></tr><tr><td align="center">%s</td><td>字符串</td></tr><tr><td align="center">%d</td><td>整数</td></tr><tr><td align="center">%u</td><td>无符号整数</td></tr><tr><td align="center">%o</td><td>八进制数</td></tr><tr><td align="center">%x</td><td>十六进制数</td></tr><tr><td align="center">%X</td><td>字母大写的十六进制数</td></tr><tr><td align="center">%f</td><td>浮点数</td></tr><tr><td align="center">%e</td><td>科学计数法表示的浮点数</td></tr><tr><td align="center">%E</td><td>大写的E表示的科学计数法</td></tr><tr><td align="center">%g</td><td>综合的%f和%e，系统自动决定是否使用科学计数法</td></tr><tr><td align="center">%G</td><td>大写表示的%g</td></tr></tbody></table><p>format()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;0:*&gt;10&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">10</span>)<span class="string">&#x27;********10&#x27;</span></span><br><span class="line"><span class="comment">##右对齐</span></span><br><span class="line"><span class="string">&#x27;&#123;0:*&lt;10&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">10</span>)<span class="string">&#x27;10********&#x27;</span></span><br><span class="line"><span class="comment">##左对齐</span></span><br><span class="line"><span class="string">&#x27;&#123;0:*^10&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">10</span>)<span class="string">&#x27;****10****&#x27;</span></span><br><span class="line"><span class="comment">##居中对齐</span></span><br><span class="line"><span class="string">&#x27;&#123;0:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">1</span>/<span class="number">3</span>)<span class="string">&#x27;0.33&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#123;0:b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">10</span>)<span class="string">&#x27;1010&#x27;</span></span><br><span class="line"><span class="comment">#二进制</span></span><br><span class="line"><span class="string">&#x27;&#123;0:o&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">10</span>)<span class="string">&#x27;12&#x27;</span></span><br><span class="line"><span class="comment">#八进制</span></span><br><span class="line"><span class="string">&#x27;&#123;0:x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">10</span>)<span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="comment">#16进制</span></span><br><span class="line"><span class="string">&#x27;&#123;:,&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">12345678901</span>) <span class="string">&#x27;12,345,678,901&#x27;</span></span><br><span class="line"><span class="comment">#千分</span></span><br></pre></td></tr></table></figure><h2 id="4-4-内置转换函数"><a href="#4-4-内置转换函数" class="headerlink" title="4.4 内置转换函数"></a>4.4 内置转换函数</h2><table><thead><tr><th>函数名</th><th>含义</th></tr></thead><tbody><tr><td>bool()</td><td>布尔值</td></tr><tr><td>int()</td><td>整数</td></tr><tr><td>float()</td><td>浮点数</td></tr><tr><td>complex()</td><td>复数</td></tr><tr><td>str()</td><td>字符串</td></tr><tr><td>ord()</td><td>返回Unicode字符对应的整数</td></tr><tr><td>chr()</td><td>返回整数对应的Unicode字符</td></tr><tr><td>bin()</td><td>整数转换成2进制字符串</td></tr><tr><td>oct()</td><td>整数转换成8进制字符串</td></tr><tr><td>hex()</td><td>整数转换成16进制字符串</td></tr><tr><td>list()</td><td>根据传入参数创建一个新的列表</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="string">&quot;abcd&quot;</span>)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure><p>len()函数</p><p>得到容器最后一个元素</p><p>1）通过-1  2）通过len()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1[-<span class="number">1</span>]</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1[<span class="built_in">len</span>(t1)-<span class="number">1</span>]</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>max、min函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(t1)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(t1)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="4-5语句"><a href="#4-5语句" class="headerlink" title="4.5语句"></a>4.5语句</h2><h3 id="1-赋值语句"><a href="#1-赋值语句" class="headerlink" title="1.赋值语句"></a>1.赋值语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=b=c=<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=b+<span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="number">5</span> <span class="number">11</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="2-if语句"><a href="#2-if语句" class="headerlink" title="2.if语句"></a>2.if语句</h3><p>判断奇偶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;偶数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;奇数&quot;</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line">奇数</span><br></pre></td></tr></table></figure><p>计算水费问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> x&lt;=<span class="number">15</span>:</span><br><span class="line">    y=<span class="number">4</span>*x/<span class="number">3</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y=<span class="number">2.5</span>*x-<span class="number">17.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(y))</span><br><span class="line"><span class="comment">#限制两位小数输出格式</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">13.33</span></span><br></pre></td></tr></table></figure><h3 id="3-for语句"><a href="#3-for语句" class="headerlink" title="3.for语句"></a>3.for语句</h3><p>for variable in 列表</p><p>遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#输出在一行</span></span><br></pre></td></tr></table></figure><p>range(start,stop,step)函数</p><p>start:计数默认从0开始</p><p>stop:list(range(0,5)) 不包括5 是[0,1,2,3,4]</p><p>step:默认为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>,<span class="number">4</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,-<span class="number">10</span>,-<span class="number">1</span>))</span><br><span class="line">[<span class="number">0</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>, -<span class="number">6</span>, -<span class="number">7</span>, -<span class="number">8</span>, -<span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>输入n (n&gt;=10) 求1+2+3+……+n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s=<span class="built_in">sum</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(n+<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><p>输入n(n&gt;=5) 求n!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">factor=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>))</span><br><span class="line">f=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> factor:</span><br><span class="line">    f=f*i</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure><h2 id="4-6列表推导式"><a href="#4-6列表推导式" class="headerlink" title="4.6列表推导式"></a>4.6列表推导式</h2><p>列表</p><p>元素组成 之间用逗号分开</p><p>元素类型可以相同可以不同</p><p>通过序号可以引用列表中的元素</p><p>支持加法、乘法、比较、索引、切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]+[<span class="string">&quot;heiheihei&quot;</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;heiheihei&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]*<span class="number">5</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&lt;[<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>列表运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_list=[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hobby=[<span class="string">&#x27;basketball&#x27;</span>,<span class="string">&#x27;reading&#x27;</span>,<span class="string">&#x27;dancing&#x27;</span>,<span class="string">&#x27;speaking&#x27;</span>,<span class="string">&#x27;rap&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hobby[<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;dancing&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>列表推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1=[<span class="number">2</span>*number <span class="keyword">for</span> number <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1=[number <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1=[number <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>)<span class="keyword">if</span> number%<span class="number">2</span>==<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>#求1+1/2+…+1/20</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="built_in">sum</span>([<span class="number">1</span>/i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line"><span class="number">3.547739657143682</span></span><br></pre></td></tr></table></figure><p>#求1-1/2+1/3-1/4  n项和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a=<span class="built_in">sum</span>([<span class="number">1</span>/i <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span> <span class="keyword">else</span> -<span class="number">1</span>/i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>)])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>#求1-1/3+1/5-1/7+…-1/47+1/49</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>/i <span class="keyword">if</span> i%<span class="number">4</span>==<span class="number">1</span> <span class="keyword">else</span> -<span class="number">1</span>/i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(a))</span><br><span class="line"><span class="number">0.7953941713587581</span></span><br></pre></td></tr></table></figure><p>#求6+66+666+….</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">print(sum([int(&#x27;6&#x27;*i) for i in range(1,n+1)]))</span><br></pre></td></tr></table></figure><h2 id="4-7格式化输出"><a href="#4-7格式化输出" class="headerlink" title="4.7格式化输出"></a>4.7格式化输出</h2><p>华氏摄氏温度转化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lower,upper=<span class="built_in">input</span>().split()</span><br><span class="line">lower,upper=<span class="built_in">int</span>(lower),<span class="built_in">int</span>(upper)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lower,upper,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,<span class="string">&quot;&#123;:.1f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">5</span>*(i-<span class="number">32</span>)/<span class="number">9</span>))</span><br><span class="line"><span class="number">20</span> <span class="number">25</span></span><br><span class="line"><span class="number">20</span> -<span class="number">6.7</span></span><br><span class="line"><span class="number">22</span> -<span class="number">5.6</span></span><br><span class="line"><span class="number">24</span> -<span class="number">4.4</span></span><br></pre></td></tr></table></figure><p>format函数</p><p>str.format()</p><p>print(“{0:.2f}{1:.2f}”.format(x,y))</p><p>0 1 代表format函数第一和第二个参数</p><p>.2f表示小数部分保留两位</p><p>#求1-2/3+3/5-4/7+5/9+……..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">list</span>=[i/(<span class="number">2</span>*i-<span class="number">1</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span> <span class="keyword">else</span> -i/(<span class="number">2</span>*i-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br><span class="line">result=<span class="built_in">sum</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(result))</span><br><span class="line"><span class="comment">#或者用for循环</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">result=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">        result=result+i/(<span class="number">2</span>*i-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result=result-i/(<span class="number">2</span>*i-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(result))</span><br></pre></td></tr></table></figure><p>sum函数</p><p>（可以求序列（列表、元组、集合）的和）</p><p>sum(iterable[,start])</p><h2 id="4-8一些会用到的函数"><a href="#4-8一些会用到的函数" class="headerlink" title="4.8一些会用到的函数"></a>4.8一些会用到的函数</h2><table><thead><tr><th align="center">函数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">split()</td><td align="center">空格内为空白默认以空格分割，(,)以逗号分割</td></tr><tr><td align="center">map(a,b)</td><td align="center">将括号内的第二项作为自变量，第一项作为函数做映射</td></tr><tr><td align="center">ceil()</td><td align="center">返回数字的上入整数</td></tr><tr><td align="center">floor()</td><td align="center">返回数字的下入整数</td></tr><tr><td align="center">strip()</td><td align="center">用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列</td></tr><tr><td align="center">eval()</td><td align="center">用来执行一个字符串表达式，并返回表达式的值</td></tr><tr><td align="center">list()</td><td align="center">转换为列表</td></tr><tr><td align="center">zip()</td><td align="center">将对象打包成元组</td></tr><tr><td align="center">print(“”,end=””)</td><td align="center">取消换行</td></tr><tr><td align="center">math.sin(math.radians(35))</td><td align="center">计算sin(35°)</td></tr><tr><td align="center">math.log(7）</td><td align="center">计算ln(7)</td></tr></tbody></table><p>eval()函数</p><p><strong>作用</strong>：将字符串转为python语句（就是去掉“”）然后执行转化后的语句</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">b = 2</span><br><span class="line">c = eval(&quot;a+b&quot;)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">#输出为3</span><br></pre></td></tr></table></figure><h2 id="4-9-map函数使用"><a href="#4-9-map函数使用" class="headerlink" title="4.9==map函数使用=="></a>4.9==map函数使用==</h2><p>map函数的原型是map(function, iterable, …)，它的返回结果是一个列表。</p><p>参数function传的是一个函数名，可以是python内置的，也可以是自定义的。<br>参数iterable传的是一个可以迭代的对象，例如列表，元组，字符串这样的。</p><p>这个函数的意思就是将function应用于iterable的每一个元素，结果以列表的形式返回。注意到没有，iterable后面还有省略号，意思就是可以传很多个iterable，如果有额外的iterable参数，并行的从这些参数中取元素，并调用function。如果一个iterable参数比另外的iterable参数要短，将以None扩展该参数元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">c=<span class="string">&quot;zhangkang&quot;</span></span><br><span class="line"></span><br><span class="line">la=<span class="built_in">map</span>(<span class="built_in">str</span>,a)</span><br><span class="line">lb=<span class="built_in">map</span>(<span class="built_in">str</span>,b)</span><br><span class="line">lc=<span class="built_in">map</span>(<span class="built_in">str</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(la)</span><br><span class="line"><span class="built_in">print</span>(lb)</span><br><span class="line"><span class="built_in">print</span>(lc)</span><br></pre></td></tr></table></figure><blockquote><p>输出：<br>[‘1’, ‘2’, ‘3’, ‘4’, ‘5’]<br>[‘1’, ‘2’, ‘3’, ‘4’, ‘5’]<br>[‘z’, ‘h’, ‘a’, ‘n’, ‘g’, ‘k’, ‘a’, ‘n’, ‘g’]</p></blockquote><h2 id="4-10列表list"><a href="#4-10列表list" class="headerlink" title="4.10列表list[]"></a>4.10列表list[]</h2><p>也可以表示一个矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="built_in">list</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>和字符串不同 列表中元素可以被修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]=<span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>用del语句删除元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">&#x27;John&#x27;</span>,<span class="string">&#x27;May&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> name[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line">[<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br></pre></td></tr></table></figure><p>切片赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="built_in">list</span>(<span class="string">&#x27;Alice&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">2</span>:]=<span class="built_in">list</span>(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><p>列表的函数或方法</p><table><thead><tr><th align="center">列表常用方法或函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">L.append(x)</td><td align="center">在列表L尾部追加X</td></tr><tr><td align="center">L.clear()</td><td align="center">移除列表L的所有元素</td></tr><tr><td align="center">L.count(x)</td><td align="center">计算列表L中x出现的次数</td></tr><tr><td align="center">L.copy()</td><td align="center">列表L的备份</td></tr><tr><td align="center">L.extend(x)</td><td align="center">将列表x扩充到列表L中</td></tr><tr><td align="center">L.index(value[,start[,stop)</td><td align="center">计算在指定范围内value的下标</td></tr><tr><td align="center">L.insert(index,x)</td><td align="center">在下标index的位置插入X</td></tr><tr><td align="center">L.pop(index)</td><td align="center">返回并删除下标为index的元素，默认是最后一个</td></tr><tr><td align="center">L.remove(value)</td><td align="center">删除值为value的第一个元素</td></tr><tr><td align="center">L.reverse()</td><td align="center">倒置列表L</td></tr><tr><td align="center">L.sort()</td><td align="center">对列表元素排序</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">11</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">100</span>,<span class="number">66</span>)  <span class="comment">#插入指定位置不存在 则放到最后</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">66</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除函数remove（）删除某个数据在列表中第一次出现的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#弹出函数pop()</span></span><br><span class="line"><span class="comment">#用函数pop()删除并返回列表中指定下标（位置）的数据，</span></span><br><span class="line"><span class="comment">#如果下标不指定，则删除最后一项。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">2</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#反转函数reverse()用函数reverse()将列表反转。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找函数index()</span></span><br><span class="line"><span class="comment">#函数index()用于在列表中查找某个数据第一出现的位置（下标）。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">8</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拆分字符串函数split()</span></span><br><span class="line"><span class="comment">#函数split()用一个字符或子串将一个字符串分隔成列表的元素。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date = <span class="string">&#x27;3/11/2018&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = date.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>]</span><br><span class="line"><span class="comment">#如果split()函数不带参数，就是以空格来分割字符串。&gt;&gt;&gt; name = &#x27;John Johnson&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= name.split()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Johnson&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#聚合字符串函数join()</span></span><br><span class="line"><span class="comment">#函数join()用于将一个列表的各个字符串类型的元素组合成一个字符串，元素之间用指定的内容填充。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>,<span class="string">&#x27;good&#x27;</span>,<span class="string">&#x27;ok&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.join(a)</span><br><span class="line"><span class="string">&#x27;hellohigoodok&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27; &#x27;</span>.join(a)</span><br><span class="line"><span class="string">&#x27;hello hi good ok&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;:&#x27;</span>.join(a)</span><br><span class="line"><span class="string">&#x27;hello:hi:good:ok&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例3-3在一行中输入若干个整数，至少输入一个整数，</span></span><br><span class="line"><span class="comment">#整数之间用空格分割,要求将数据按从小到大排序输出。</span></span><br><span class="line"><span class="comment">#程序代码:</span></span><br><span class="line">nums=<span class="built_in">input</span>()</span><br><span class="line">numl=[<span class="built_in">int</span>(n) <span class="keyword">for</span> n <span class="keyword">in</span> nums.split()]numl.sort()</span><br><span class="line"><span class="built_in">print</span>(numl)</span><br><span class="line"><span class="comment">#程序输入:</span></span><br><span class="line"><span class="number">5</span>-<span class="number">76</span> <span class="number">8345</span> <span class="number">67</span></span><br><span class="line"><span class="comment">#程序输出:</span></span><br><span class="line">[-<span class="number">76</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">67</span>,<span class="number">345</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建列表的方法</p><p>第1种，使用符号[]，如list1 = [1,2,3,4]</p><p> 第2种，列表推导式，如list2 = [x for x in range(10)] </p><p> 第3种，使用list函数，如list3 = list(‘abc’) </p><p> 第4种，使用字符串的split()方法，如list4 = ‘hello world’.split()</p><p> 此外用for循环也可以增加列表元素</p><h2 id="4-11元组（tuple）"><a href="#4-11元组（tuple）" class="headerlink" title="4.11元组（tuple）"></a>4.11元组（tuple）</h2><p>​        元组是不可修改的任何类型的数据序列。元组像列表一样可以表达任何类型、任意数量的数据的有序序列。<br>元组的字面量用圆括号()而不是方括号[]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建元组</span></span><br><span class="line"><span class="comment">#用元组的字面量</span></span><br><span class="line">d = (<span class="number">100</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">输出:(<span class="number">100</span>,<span class="number">20</span>)</span><br><span class="line"><span class="comment">#用tuple()方法，把其他序列类型转换成元组。</span></span><br><span class="line">a = <span class="built_in">tuple</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">输出:</span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>，<span class="number">11</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>元组不可修改<br>元组是不可修改的,即不能对元组中的元素进行增加，删除,修改或排序。<br>列表中的修改函数append()、insert()、remove()以及del语句都不能用于元组。</p><p>随机函数库</p><table><thead><tr><th align="center">函数名</th><th align="center">含义</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">random.random()</td><td align="center">返回一个介于左闭右开[0.0，1.0)区间的浮</td><td align="center">random.random()</td></tr><tr><td align="center">random.uniform(a, b)</td><td align="center">返回一个介于【a，b】的浮点数。</td><td align="center">random.uniform(1,10)</td></tr><tr><td align="center">random.randint(a,b )</td><td align="center">返回【a,b】的一个随机整整。</td><td align="center">random.randint(15,30 )</td></tr><tr><td align="center">random.randrange([start], stop[, step])</td><td align="center">从指定范围内，获取一个随机数</td><td align="center">random.randrange(10,30,2)</td></tr><tr><td align="center">random.choice(sequence)</td><td align="center">从序列中获取一个随机元素</td><td align="center">random.choice([3,78,43,7])</td></tr><tr><td align="center">random.shuffle(x)</td><td align="center">用于将一个列表中的元素打乱,即将列表</td><td align="center">random.shuffle(I)，l是序列</td></tr><tr><td align="center">random.sample(sequence, k)</td><td align="center">从指定序列中随机获取长度为k的序列并</td><td align="center">random.sample([1,4,5,89,7],3)</td></tr><tr><td align="center">random.seed(n)</td><td align="center">对随机数生成器进行初始化的函数，n代表随机种子。参数为空时，随机种子为系统时间</td><td align="center">random.seed(2)</td></tr></tbody></table><h2 id="4-12随机函数库-（random）"><a href="#4-12随机函数库-（random）" class="headerlink" title="4.12随机函数库 （random）"></a>4.12随机函数库 （random）</h2><table><thead><tr><th align="center">函数名</th><th align="center">含义</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">random.random(）</td><td align="center">返回一个介于左闭右开[0.0，1.0)区间的浮点数</td><td align="center">random.random()</td></tr><tr><td align="center">random.uniform(a, b)</td><td align="center">返回一个介于【a，b】的浮点数。</td><td align="center">random.uniform(1,10)</td></tr><tr><td align="center">random.randint(a,b )</td><td align="center">返回【a,b】的一个随机整数。</td><td align="center">random.randint(15,30 )</td></tr><tr><td align="center">random.randrange(start, stop, step])</td><td align="center">从指定范围内，获取一个随机数</td><td align="center">random.randrange(10,30,2)</td></tr><tr><td align="center">random.choice(sequence)</td><td align="center">从序列中获取一个随机元素</td><td align="center">random.choice([3,78,43,7])</td></tr><tr><td align="center">random.shuffle(x)</td><td align="center">用于将一个列表中的元素打乱,即将列表内的元素随机排列</td><td align="center">random.shuffle(I)，l是序列</td></tr><tr><td align="center">random.sample(sequence, k)</td><td align="center">从指定序列中随机获取长度为k的序列并随机排列</td><td align="center">random.sample([1,4,5,89,7],3)</td></tr><tr><td align="center">random.seed(n)</td><td align="center">对随机数生成器进行初始化的函数,n代表随机种子。参数为空时，随机种子为系统时间</td><td align="center">random.seed(2)</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()<span class="comment">#返回一个介于左闭右开[0.0，1.0)区间的浮点数</span></span><br><span class="line"><span class="number">0.8739579487396387</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">1</span>,<span class="number">10</span>) <span class="comment">#返回一个介于【a，b】的浮点数</span></span><br><span class="line"><span class="number">2.693031261624582</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">20</span>,<span class="number">30</span>) <span class="comment">#返回【a,b】的一个随机整数</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">10</span>,<span class="number">30</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="number">3</span>,<span class="number">78</span>,<span class="number">43</span>,<span class="number">7</span>])  <span class="comment">#从序列中随机获取一个</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>I=[<span class="string">&#x27;A&#x27;</span>,<span class="number">1</span>,<span class="number">78</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(I)<span class="comment">#列表元素打乱</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>I</span><br><span class="line">[<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">78</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample([<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">89</span>,<span class="number">7</span>],<span class="number">3</span>) <span class="comment">#从指定序列中随机获取长度为k的序列并随机排列</span></span><br><span class="line">[<span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample(<span class="string">&quot;This is a sample&quot;</span>,<span class="number">5</span>)  <span class="comment">#从指定序列中随机获取长度为k的序列并随机排列</span></span><br><span class="line">[<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p> random.randrange(10,30,2)，它将生成10 到 30 之间的任何随机整数值，如 10, 12,14, 16, ……..28。但是这个函数在生成随机数时从不包含 30。</p><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><h2 id="5-1集合"><a href="#5-1集合" class="headerlink" title="5.1集合"></a>5.1集合</h2><h4 id="5-1-1定义"><a href="#5-1-1定义" class="headerlink" title="5.1.1定义"></a>5.1.1定义</h4><p>元素没有先后顺序，元素的值不重复</p><p>集合中的字面量用花括号{}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;1,5,7&#125;</span><br><span class="line">&#123;&#x27;apple&#x27;,&#x27;banana&#x27;,&#x27;pear&#x27;&#125;</span><br></pre></td></tr></table></figure><p>创建集合</p><p>直接给变量赋值一个集合字面量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fruit = &#123;<span class="string">&#x27;apple&#x27;</span> , <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>使用set()创建一个空集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emp = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>注:emp={}  #创建一个空字典<br>使用set()将列表或元组转换成集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prime = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>])</span><br></pre></td></tr></table></figure><p>结果是:<br>{1,3,5,7,11}</p><p>集合的值不重复<br>创建集合的时候，python会消除重复的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fruit = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>结果是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-2操作和访问集合的元素"><a href="#5-1-2操作和访问集合的元素" class="headerlink" title="5.1.2操作和访问集合的元素"></a>5.1.2操作和访问集合的元素</h4><p>S={2,3,5,7,11}</p><table><thead><tr><th align="center">函数</th><th align="center">示例</th><th align="center">结果</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">len()</td><td align="center">len(s)</td><td align="center">5</td><td align="center">返回集合中元素的数量</td></tr><tr><td align="center">min()</td><td align="center">min(s)</td><td align="center">2</td><td align="center">返回集合中最小的元素</td></tr><tr><td align="center">max()</td><td align="center">max(s)</td><td align="center">11</td><td align="center">返回集合中最大的元素</td></tr><tr><td align="center">sum()</td><td align="center">sum(s)</td><td align="center">27</td><td align="center">所有元素累加起来</td></tr><tr><td align="center">add()</td><td align="center">add(13)</td><td align="center">{2,3,5,7,11,13}</td><td align="center">将一个元素加入集合中</td></tr><tr><td align="center">remove()</td><td align="center">remove(3)</td><td align="center">{2,5,7,11}</td><td align="center">删除一个元素，若不存在则KeyError异常</td></tr></tbody></table><p>【eg】用循环实现遍历集合中的各个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="5-1-3元素、子集、超集和相等判断"><a href="#5-1-3元素、子集、超集和相等判断" class="headerlink" title="5.1.3元素、子集、超集和相等判断"></a>5.1.3元素、子集、超集和相等判断</h4><p>运算符in和not in用于判断某个元素是否在集合中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> <span class="keyword">in</span> s)<span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">not</span> <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>如果集合s1中的元素，同样都在集合s2中，则称s1为s2的子集，s2为s1的超集。<br>●使用s1.issubset(s2)来判断s1是否为s2的子集。</p><p>●使用s2.issuperset(s1)来判断s1是否为s2的超集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;</span><br><span class="line">s2= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.issubset(s2))</span><br><span class="line"><span class="built_in">print</span>(s2.issuperset(s1))</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>使用关系运算符==和!=<br>判断2个集合是否包含完全相同的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1 == s2)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>使用关系运算符&lt;,&lt;=,&gt;,&gt;=。</p><ul><li><p>如果s1是s2的真子集，则s1&lt;s2是True</p></li><li><p>如果s1是s2的子集，则s1&lt;=s2是True</p></li><li><p>如果s1是s2的真超集，则s1&gt;s2是True</p></li><li><p>如果s1是s2的超集，则s1&gt;=s2是True</p><p>注: s1是s2的真子集的意思是s1是s2的子集，但是s2中至少有一个s1中不存在的元素;s1是s2的真超集的意思是s1是s2的超集，但是s1中至少有一个s2中不存在的元素。</p></li></ul><h4 id="5-1-4集合运算"><a href="#5-1-4集合运算" class="headerlink" title="5.1.4集合运算"></a>5.1.4集合运算</h4><p>通过集合的函数或运算符进行集合的并集、交集、差集和对称差的集合运算。<br>假设2个集合: s1={2,3,5,7,11},s2={2,3,4,5,6,7}，下列给出4种集合运算的示例。</p><table><thead><tr><th align="center">运算</th><th align="center">函数</th><th align="center">运算符</th><th align="center">示例</th><th align="center">结果</th><th>说明</th></tr></thead><tbody><tr><td align="center">并集</td><td align="center">union()</td><td align="center">|</td><td align="center">s1.union(s2)</td><td align="center">{2,3,4,5,6,7,11}</td><td>结果是包含两个集合中所有元素的新集合</td></tr><tr><td align="center">交集</td><td align="center">intersection()</td><td align="center">&amp;</td><td align="center">s1&amp;s2</td><td align="center">{2,3,5,7}</td><td>交集是只包含两个集合中都有的元素的新集合</td></tr><tr><td align="center">差集</td><td align="center">difference()</td><td align="center">-</td><td align="center">s1 -s2</td><td align="center">{11}</td><td>s1-s2的结果是出现在s1，但不出现在s2的元素的新集合</td></tr><tr><td align="center">对称差</td><td align="center">symmertric_ difference()</td><td align="center">^</td><td align="center">s1^s2</td><td align="center">{4,6,11}</td><td>结果是一个除了共同元素之外的所有元素</td></tr></tbody></table><h2 id="5-2字典"><a href="#5-2字典" class="headerlink" title="5.2字典"></a>5.2字典</h2><h4 id="5-2-1字典的基本运算"><a href="#5-2-1字典的基本运算" class="headerlink" title="5.2.1字典的基本运算"></a>5.2.1字典的基本运算</h4><p>​    字典是一个用“键”做索引来存储数据的集合。一个键和它所对应的数据形成字典中的一个条目。<br>​    <strong>创建字典</strong><br>​    用花括号{ }来表示，每个元素用冒号分隔键和数据。<br>​    students = {3180101:’张三’，3180102:’李四’，3180105:’王五’，3180110:’赵六’}<br>​    ●可以用{}或者dict()来创建空字典。</p><p>​    <strong>用dict()创建字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;fac=<span class="built_in">dict</span>(<span class="string">&quot;math&quot;</span>,<span class="string">&quot;0001&quot;</span>),(<span class="string">&quot;python&quot;</span>,0002<span class="string">&quot;),(&quot;</span>c<span class="string">&quot;,&quot;</span>0003<span class="string">&quot;)])</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;fac</span></span><br><span class="line"><span class="string">&#123;&#x27;math&#x27;: &#x27;0001, &#x27;python&#x27;: &#x27;0002&#x27;，&#x27;c&#x27;: &#x27;0003&#x27;&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; fac=dict(math=&quot;</span>0001<span class="string">&quot;,python=&quot;</span>0002<span class="string">&quot; ,c=&quot;</span>0003<span class="string">&quot;)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; fac</span></span><br><span class="line"><span class="string">&#123;&#x27;math&#x27;: &#x27;0001, &#x27;python&#x27;: &#x27;0002&#x27;，&#x27;c&#x27;: &#x27;0003&#x27;&#125;</span></span><br><span class="line"><span class="string">注意:后一种方式要用标识符</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>​    <strong>字典的键</strong><br>​    不可变对象可作为字典的键，如<br>​                数字，字符串，元组<br>​    可变对象不可以作为字典的键，如:<br>​                列表，字典等</p><p>​    <strong>字典的基本运算</strong></p><p>​    访问和修改条目<br>​            直接用[ ]运算符，用&lt;字典&gt; [键]的形式，访问键所对应的数据。<br>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">score = &#123;’张三&#x27;:78, &#x27;李四&#x27;:92&#125;</span><br><span class="line">print(score[&#x27;张三&#x27;])#访问score中键为&#x27;张三的数据</span><br><span class="line">score[&#x27;李四&#x27;]= 89#把score中键为李四&#x27;的数据修改为89</span><br><span class="line">score[&#x27;王五&#x27;]= 100#score中没有键为‘王五的元素，则增加一项，</span><br><span class="line">#键为&#x27;王五’， 数据为100。</span><br><span class="line">print(score)</span><br></pre></td></tr></table></figure><p>输出:****</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">78</span><br><span class="line">&#123;张三&#x27;: 78, &#x27;李四&#x27;: 89, &#x27;王五&#x27;: 100&#125;</span><br></pre></td></tr></table></figure><p><strong>删除条目</strong></p><p>用del语句，删除指定键的字典条目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del score[&#x27;张三&#x27;]</span><br></pre></td></tr></table></figure><p>注：如果指定键不存在，则会抛出KeyError异常</p><p><strong>遍历字典</strong></p><p>●使用循环语句实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score = &#123;张三:<span class="number">78</span>, <span class="string">&#x27;李四&#x27;</span>:<span class="number">92</span>, <span class="string">&#x27;王五&#x27;</span>:<span class="number">89</span>&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> score:</span><br><span class="line"><span class="built_in">print</span>(name + :<span class="string">&#x27; + str(score[name]))</span></span><br></pre></td></tr></table></figure><p>输出:<br>张三:78<br>李四:92<br>王五:89</p><p><strong>字典大小</strong><br>    用函数len()得到字典的条目的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(score)</span><br></pre></td></tr></table></figure><p><strong>检测</strong><br>    用in和notin运算符检测一一个键是否在字典中存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score = &#123;张三<span class="string">&#x27;:78, &#x27;</span>李四<span class="string">&#x27;:92, &#x27;</span>王五<span class="string">&#x27;:89&#125;</span></span><br><span class="line"><span class="string">print(&#x27;</span>李四<span class="string">&#x27; in score)</span></span><br><span class="line"><span class="string">print(&#x27;</span>小白<span class="string">&#x27; in score)</span></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p><strong>用==和!=比较2个字 典是否相同(键和值都相同)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score= &#123;张三<span class="string">&#x27;:78, &#x27;</span>李四<span class="string">&#x27;:92, &#x27;</span>王五<span class="string">&#x27;:89&#125;</span></span><br><span class="line"><span class="string">mark = &#123;张三&#x27;</span>:<span class="number">78</span>, <span class="string">&#x27;李四&#x27;</span>:<span class="number">92</span>，<span class="string">&#x27;王五&#x27;</span>:<span class="number">91</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(score == mark)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">False</span><br></pre></td></tr></table></figure><h4 id="5-2-2常见的字典方法"><a href="#5-2-2常见的字典方法" class="headerlink" title="5.2.2常见的字典方法"></a>5.2.2常见的字典方法</h4><table><thead><tr><th align="center">函数</th><th align="center">返回值和说明</th></tr></thead><tbody><tr><td align="center">keys()</td><td align="center">返回由全部的键组成的一个序列</td></tr><tr><td align="center">values()</td><td align="center">返回由全部的值组成的一个序列</td></tr><tr><td align="center">items()</td><td align="center">返回一个序列，其中的每项是一个元组，每个元组 由键和它对应的值组成</td></tr><tr><td align="center">clear()</td><td align="center">删除所有条目</td></tr><tr><td align="center">get(key)</td><td align="center">返回这个键所对应的值</td></tr><tr><td align="center">pop(key)</td><td align="center">返回这个键所对应的值，同时删除这个条目</td></tr></tbody></table><p>说明<br>函数get()和运算符[ ]不同之处，在于如果键key在字典中不存在，则get(key)返回None值，而运算符[ ]会抛出KeyError异常。<br>函数keys()、values()和items()都 是返回一个序列。由于字典中键不重复，所以keys()和items()的返回结果可以转换成元组;而values()返回值由于可能存在重复值，应该转换为列表。<br>score = {张三’:78, ‘李四’:92, ‘王五’:92}<br>v = list(score.values())<br>print(v)<br>[78, 92, 92]</p><p><strong>用items()实现字典遍历</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score = &#123;张三:<span class="number">78</span>, <span class="string">&#x27;李四&#x27;</span>:<span class="number">92</span>, <span class="string">&#x27;王五&#x27;</span>:<span class="number">89</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> score .items():</span><br><span class="line"><span class="built_in">print</span>(key + <span class="string">&#x27;:&#x27;</span> <span class="built_in">str</span>(value))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三:78</span><br><span class="line">李四:92 </span><br><span class="line">王五:89</span><br></pre></td></tr></table></figure><p><strong>各种数据类型汇总</strong></p><table><thead><tr><th align="center">数据类型</th><th align="center">可变性</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">整数</td><td align="center">不可变</td><td align="center">5</td></tr><tr><td align="center">浮点数</td><td align="center">不可变</td><td align="center">6.7</td></tr><tr><td align="center">复数</td><td align="center">不可变</td><td align="center">3+89j</td></tr><tr><td align="center">字符串</td><td align="center">不可变</td><td align="center">“hello”</td></tr><tr><td align="center">逻辑量</td><td align="center">不可变</td><td align="center">True</td></tr><tr><td align="center">列表</td><td align="center">可变</td><td align="center">[“mon”,2,3,4,5]</td></tr><tr><td align="center">元组</td><td align="center">不可变</td><td align="center">(7,8,9)</td></tr><tr><td align="center">集合</td><td align="center">可变</td><td align="center">{1,4,6}</td></tr><tr><td align="center">字典</td><td align="center">可变</td><td align="center">{1:”jan”,2:”feb”,3:”mar”}</td></tr></tbody></table><h4 id="5-2-3总结"><a href="#5-2-3总结" class="headerlink" title="5.2.3总结"></a>5.2.3总结</h4><ul><li>集合和字典是两种数据容器。</li><li>集合中没有重复的数据，数据没有位置和顺序，<br>不能用索引来存取。集合可以做交、并、差等运算。</li><li>字典是用键来存取数据的，数字、字符串和元组都可以<br>作为键。键所对应的值可以是任何类型，数字、字符串<br>甚至列表和字典都可以作为值存放在字典中。</li></ul><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><h2 id="6-1函数定义与调用"><a href="#6-1函数定义与调用" class="headerlink" title="6.1函数定义与调用"></a>6.1函数定义与调用</h2><p>函数是重用的程序段。它们允许你给一段语包命名一个名字，这是<strong>函数定义</strong>。</p><p>你可以在你的程序的任何地方使用这个名称运行这个语句块，这是<strong>函数调用</strong></p><p>内置函数不用定义，直接调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">len</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>自定义函数语法格式:<br>def函数名(参数表):<br>函数体</p><p>如要定义函数: y=x²+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">value=x**<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">y=f(n)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求斐波那契数列的前n项</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filbs</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="comment">#函数定义</span></span><br><span class="line">result=[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</span><br><span class="line">result.append(result[-<span class="number">2</span>]+result[-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> result <span class="comment">#返回列表</span></span><br><span class="line"><span class="built_in">print</span>(fibs (<span class="number">5</span>))</span><br><span class="line"><span class="comment">#函数调用</span></span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>[注意] 函数要先定义再使用</p><p><strong>匿名函数–lambda表达式</strong><br>        函数定义的另- -种方法是用lambda表达式，它定义了一个匿名函数。lambda的一般形式是关键字lambda后面跟一一个或多个参数，紧跟一个冒号，后面是一个表达式。作为表达式，lambda返回一个值。lambda 用来编写简单的函数，而def用来处理更强大任务的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = lambda x,y,z: x+y+z</span><br><span class="line">#把lambda定义的匿名函数赋给函数g</span><br><span class="line">print (g(1,4,5))</span><br></pre></td></tr></table></figure><p>练习：定义函数y=sin(x)+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">y=math.sin(x)+<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line">y=f(<span class="number">3.5</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line">运行结果:</span><br><span class="line"><span class="number">0.6492167</span> <span class="number">723103801</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-2函数参数"><a href="#6-2函数参数" class="headerlink" title="6.2函数参数"></a>6.2函数参数</h2><p>函数定义时的参数称为形参，这些参数就像变量一样<br>参数在函数定义的圆括号内指定，用逗号分割。<br>当我们调用函数的时候，函数中的参数值称为实参<br>函数形参取得的值是你调用函数时提供的实参。</p><p><strong>位置参数、关键字参数、默认值参数、数量可变参数</strong></p><h3 id="6-2-1位置参数"><a href="#6-2-1位置参数" class="headerlink" title="6.2.1位置参数"></a>6.2.1位置参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span>(<span class="params">x1,y1 ,x2,y2</span>):</span> <span class="comment">#求平面.上两点距离</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x1=&#123;&#125;,y1=&#123;&#125;,x2=&#123;&#125;,y2=&#123;&#125;&quot;</span> .<span class="built_in">format</span>(x1,y1 ,x2,y2))</span><br><span class="line"><span class="keyword">return</span> sqrt(x1-x2)**<span class="number">2</span>+(y1-y2)**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(dis(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>传入参数的值是按照顺序依次赋值给形参。</p><h3 id="6-2-2关键字参数"><a href="#6-2-2关键字参数" class="headerlink" title="6.2.2关键字参数"></a>6.2.2关键字参数</h3><p>为了避免位置参数严格的位置要求，调用参数时可以指定对应形式参数的名字，这是关键字参数，它甚至可以采用与函数定义时不同的顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span>(<span class="params">x1,y1,x2,y2</span>):</span> <span class="comment">#求平面上两点距离</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x1=&#123;,y1=&#123;&#125;,x2=&#123;&#125;,y2=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x1,y1 ,x2,y2))</span><br><span class="line"><span class="keyword">return</span> sqt((x1-x2)* *<span class="number">2</span>+(y1-y2)**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(dis(x1=<span class="number">1</span>,y2=<span class="number">5</span>,y1=<span class="number">3</span>,x2=<span class="number">4</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-3位置参数和关键字参数混合"><a href="#6-2-3位置参数和关键字参数混合" class="headerlink" title="6.2.3位置参数和关键字参数混合"></a>6.2.3位置参数和关键字参数混合</h3><p>如果同时出现两种参数形式，首先应该写的是位置参数，然后是关键字参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span>(<span class="params">x1,y1 ,x2,y2</span>):</span> <span class="comment">#求平面上两点距离</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x1=&#123;&#125;,y1=&#123;&#125;,x2=&#123;,y2=&#123;&quot;</span> .<span class="built_in">format</span>(x1,y1 ,x2,y2))</span><br><span class="line"><span class="keyword">return</span> sqt((x1-x2)**<span class="number">2</span>+(y1-y2)**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(dis(<span class="number">1</span>,<span class="number">3</span>,y2=<span class="number">5</span>,x2=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>下面程序出错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span>(<span class="params">x1,y1,x2,y2</span>):</span> <span class="comment">#求平面.上两点距离</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x1=&#123;&#125;,y1=&#123;,x2=&#123;&#125;,y2=&#123;&quot;</span> .<span class="built_in">format</span>(x1,y1 ,x2,y2))</span><br><span class="line"><span class="keyword">return</span> sqt((x1-x2)**<span class="number">2</span>+(y1-y2)**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(dis(<span class="number">1</span>,y1=<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="6-2-4默认值参数"><a href="#6-2-4默认值参数" class="headerlink" title="6.2.4默认值参数"></a>6.2.4默认值参数</h3><p>当调用方没有提供对应形式参数的值时，你可以指定默认形式参数值。如果你提供实参，在调用时会代替默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span>(<span class="params">x1,y1 ,x2,y2=<span class="number">5</span></span>):</span> <span class="comment">#求平面.上两点距离</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x1=&#123;&#125;,y1=&#123;&#125;,x2=&#123;&#125;,y2=&#123;&quot;</span>.<span class="built_in">format</span>(x1,y1 ,x2,y2))</span><br><span class="line"><span class="keyword">return</span> sqrt((x1-x2)*<span class="number">2</span>+(y1-y2)**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(dis(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>默认参数值在函数对象被创建时计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>(<span class="params"> arg, result=<span class="number">0</span></span>):</span></span><br><span class="line">result.append(arg)</span><br><span class="line"><span class="built_in">print</span>( result)</span><br><span class="line">init(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">init(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">init(<span class="number">1</span>,[<span class="number">1</span>])</span><br><span class="line">程序输出:</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-5数量可变参数"><a href="#6-2-5数量可变参数" class="headerlink" title="6.2.5数量可变参数"></a>6.2.5数量可变参数</h3><p>当函数参数数目不确定时，星号将一组可变数量的位置参数集合成参数值的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countnum</span>(<span class="params">a, *b</span>):</span> <span class="comment">#计算参数个数</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(b)+<span class="number">1</span>)</span><br><span class="line">countnum(<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">countnum(<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">89</span>)</span><br><span class="line">运行结果:</span><br><span class="line">(<span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="comment">#以元组的形式存放</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">(<span class="number">8</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">89</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="6-2-6收集参数到字典中—"><a href="#6-2-6收集参数到字典中—" class="headerlink" title="6.2.6收集参数到字典中—**"></a>6.2.6收集参数到字典中—**</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def countnum(a,**d): #计算参数个数</span><br><span class="line">print(d)</span><br><span class="line">print(len(d)+1)</span><br><span class="line">countnum(3,x1=9,x2=1,x3=6,x4=89)</span><br><span class="line">程序输出:</span><br><span class="line">&#123;&#x27;x1: 9, &#x27;x2&#x27;: 1, &#x27;x3&#x27;: 6, &#x27;x4: 89&#125;</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="6-2-7print函数完整表示"><a href="#6-2-7print函数完整表示" class="headerlink" title="6.2.7print函数完整表示"></a>6.2.7print函数完整表示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(*<span class="built_in">object</span>,sep=<span class="string">&quot;“,end=&#x27; ^\n”,file=sys.stdout)</span></span><br><span class="line"><span class="string">object:输出参数，可变数量</span></span><br><span class="line"><span class="string">缺省值参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sep=&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">:输出分割符</span></span><br><span class="line"><span class="string">end=&quot;</span>^In<span class="string">&quot;:输出函数结束换行</span></span><br><span class="line"><span class="string">file=sys. stdout:输出到屏幕缺省</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="6-2-8实参拆包"><a href="#6-2-8实参拆包" class="headerlink" title="6.2.8实参拆包"></a>6.2.8实参拆包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;1=[2,7,5]</span><br><span class="line">&gt;&gt;&gt;print(I) #参数个数是一个</span><br><span class="line">[2, 7, 5]</span><br><span class="line">&gt;&gt;&gt;print(*l) #实参拆包</span><br><span class="line">#print(2,7,5)</span><br><span class="line">275</span><br><span class="line"></span><br><span class="line">*或**都是加在形参的前面，表示不定长参数，分别用来接收不带变量名</span><br><span class="line">的多余参数和带有变量名的多余参数，分别将它们以元组和字典的形式接收进函数。</span><br><span class="line">当在实参的前面加，上*，就意味着拆包。*表示将序列拆成一个个单独的实参。</span><br></pre></td></tr></table></figure><h3 id="6-2-9可变对象和不可变对象当参数"><a href="#6-2-9可变对象和不可变对象当参数" class="headerlink" title="6.2.9可变对象和不可变对象当参数"></a>6.2.9可变对象和不可变对象当参数</h3><p>可变对象和不可变对象当参数，效果可能是不同的<br><strong>当实是不可变对象时，形值改变不会影响实参!</strong><br><strong>当实是可变对象时，形多值改变可能会影响实参!</strong></p><h2 id="6-3函数的返回值"><a href="#6-3函数的返回值" class="headerlink" title="6.3函数的返回值"></a>6.3函数的返回值</h2><ul><li>函数用return语句返回值。</li><li>return后面的表达式的值就成为这次函数调用的返回值。</li><li>如函数没有用return语句返回，这时函数返回的值为None;如果return后 面没有表达式，调用的返回值也为None。</li><li>None是Python中一个特殊的值，虽然它不表示<br>任何数据，但仍然具有重要的作用。</li></ul><p>求整数M和N区间内素数的个数并对它们求和(2&lt;=M&lt;N)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span>(<span class="params">i</span>):</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,i):</span><br><span class="line"><span class="keyword">if</span> i%k==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">m,n=<span class="built_in">input</span>().split()</span><br><span class="line">m,n=<span class="built_in">int</span>(m),<span class="built_in">int</span>(n)</span><br><span class="line">p=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m,n+<span class="number">1</span>) <span class="keyword">if</span> isprime()]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(p),<span class="built_in">sum</span>(p))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回值是函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">par</span>):</span></span><br><span class="line"><span class="keyword">return</span> par</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>(<span class="params">par</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>: test,</span><br><span class="line"><span class="string">&#x27;b&#x27;</span>: test1,</span><br><span class="line">&#125;.get(x, test2)</span><br><span class="line"><span class="built_in">print</span>(f(<span class="string">&quot;a&#x27;)(100)) </span></span><br><span class="line"><span class="string">print(f(4)( 100))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">2000</span></span><br></pre></td></tr></table></figure><p>集合add函数返回值是None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">按列表原来次序输出非重复元素</span><br><span class="line">I=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">seen=<span class="built_in">set</span>() <span class="comment">#集 合存放已在列表中的元素</span></span><br><span class="line">|<span class="number">1</span>=[i <span class="keyword">for</span> iinlif i <span class="keyword">not</span> <span class="keyword">in</span> seen <span class="keyword">and</span> <span class="keyword">not</span> seen.add(i)]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">程序输出: [<span class="number">2</span>,<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line">下面程序对吗?</span><br><span class="line"><span class="number">1</span>=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">seen=<span class="built_in">set</span>()</span><br><span class="line">|<span class="number">1</span>=[i <span class="keyword">for</span> i inI <span class="keyword">if</span> <span class="keyword">not</span> seen.add(i) <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> seen]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="6-4命名空间和作用域"><a href="#6-4命名空间和作用域" class="headerlink" title="6.4命名空间和作用域"></a>6.4命名空间和作用域</h2><p>1.变量可被访问范围称为变量的作用域，也称为变量命名空间或变量名字空间。Python程序 用命名空间区分不同空间的相同名字。</p><p>2.Python解释器启动时建立一个全局命名空间，全局变量就放在这个空间,还建立内置命名空间(built-in namespace),记录所有标准常量名、标准函数名等。在全局命名空间定义的变量是全局变量。<br>3.每一个函数定义自己的命名空间，函数内部定义的变量是局部变量。如果在一个函数中定义一个变量x，在另外一个函数中也定义x变量，因为是在不同的命名空间，所以两者指代的是不同的变量。可以通过多种方式获取其他命名空间的变量。</p><p>局部变量与全局变量</p><ul><li>Python语言规定赋值即定义。“var=1” 赋值语句定义了变量“var”并赋值为1</li><li>全局变量:定义在函数外，作用域是整个程序。</li><li>局部变量:定义在函数内，作用域是函数内部。形参也是局部变量</li></ul><p>局部变量与全局变量同名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope</span>():</span></span><br><span class="line">var1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数内部打印结果&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(var1 ,var2)</span><br><span class="line">var1=<span class="number">10</span></span><br><span class="line">var2=<span class="number">20</span></span><br><span class="line">scope()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数外部打印结果&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(var1 ,var2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>global关键字</p><p>如希望在函数中使用全局变量，而不是创建局部变量，需要用global关键字声明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope</span>():</span></span><br><span class="line"><span class="keyword">global</span> var1</span><br><span class="line">var1=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数内部打印结果&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(var1 ,var2)</span><br><span class="line">var1= <span class="number">10</span></span><br><span class="line">var2=<span class="number">20</span></span><br><span class="line">scope()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数外部打印结果&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(var1,var2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-5递归"><a href="#6-5递归" class="headerlink" title="6.5递归"></a>6.5递归</h2><p>函数调用自身的编程技巧称为递归<br>递归做为一种算法在程序设计中广泛应用。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，大大减少了程序的代码量。<br>递归的能力在于用有限的语句来定义对象的无限集合。一般来说，递归需要终止条件和递归条件。当终止条件不满足时，递归前进;当终止条件满足时，递归返回。编写递归函数时，必须告诉它何时停止递归，从而避免形成无限循环。</p><p>斐波那契数列递归定义</p><p>斐波那契数列是一个经常使用递归方式定<br>义的序列.<br>fib(0)= 1   n=0    (1)<br>fib(1)= 1   n=1    (2)<br>fib(n)=fib(n-1 )+fib(n-2)  n&gt;=2  (3)<br>公式(1) 和公式(2)是递归终止条件，<br>公式(3)是递归式</p><p>斐波那契数列递归程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span> <span class="comment">#假定n是正整数，返回第n+ 1个斐波那契数</span></span><br><span class="line"><span class="keyword">if</span> n==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">4</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>斐波那契数列函数调用过程</p><p><img src="/F:/学习/博客笔记/Python基础学习/斐波那契数列函数调用过程.png" alt="斐波那契数列函数调用过程"></p><p>程序运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span> <span class="comment">#假定n是正整数，返回第n+ 1个斐波那契数</span></span><br><span class="line"><span class="keyword">if</span> n==O<span class="keyword">or</span>n==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> filb(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">4</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改进：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pre=&#123;<span class="number">0</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="keyword">if</span>n <span class="keyword">in</span> pre: <span class="comment">#可以用in检查字典中是否有n这个关键字</span></span><br><span class="line"><span class="keyword">return</span> pre[n]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">newvalue=fib(n-<span class="number">1</span> )+fib(n-<span class="number">2</span>)</span><br><span class="line">pre[n]=newvalue <span class="comment">#增加字典的条目</span></span><br><span class="line"><span class="keyword">return</span> newvalue</span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5731</span> <span class="number">47844013817084101</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>求嵌套列表中数字元素和(返回多个值)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span>(<span class="params">items</span>):</span> </span><br><span class="line">lst=[]</span><br><span class="line"><span class="keyword">for</span> X <span class="keyword">in</span> items:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(x,(<span class="built_in">list</span>,<span class="built_in">tuple</span>)) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x <span class="built_in">str</span>):</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> flatten(x): </span><br><span class="line">lst.append(element)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(x)!=<span class="built_in">str</span>:</span><br><span class="line">lst.append(x)</span><br><span class="line"><span class="keyword">return</span> Ist</span><br><span class="line">items=[<span class="number">11</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">7</span>],(<span class="number">68</span>,-<span class="number">1</span>),<span class="string">&quot; 123&quot;</span>,<span class="number">9</span>]</span><br><span class="line">I=[i <span class="keyword">for</span> i <span class="keyword">in</span> flatten(items)]</span><br><span class="line"><span class="built_in">print</span>(I)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(I))</span><br><span class="line"></span><br><span class="line">程序输出</span><br><span class="line">[<span class="number">11</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">68</span>,-<span class="number">1</span>,<span class="number">9</span>]</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><h2 id="6-6内置函数"><a href="#6-6内置函数" class="headerlink" title="6.6内置函数"></a>6.6内置函数</h2><table><thead><tr><th align="left">内置函数</th><th align="left"></th><th align="left"></th><th></th><th></th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/func-number-abs.html">abs()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-divmod.html">divmod()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-input.html">input()</a></td><td><a href="https://www.runoob.com/python/python-func-open.html">open()</a></td><td><a href="https://www.runoob.com/python/python-func-staticmethod.html">staticmethod()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-all.html">all()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-enumerate.html">enumerate()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-int.html">int()</a></td><td><a href="https://www.runoob.com/python/python-func-ord.html">ord()</a></td><td><a href="https://www.runoob.com/python/python-func-str.html">str()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-any.html">any()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-eval.html">eval()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-isinstance.html">isinstance()</a></td><td><a href="https://www.runoob.com/python/func-number-pow.html">pow()</a></td><td><a href="https://www.runoob.com/python/python-func-sum.html">sum()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-basestring.html">basestring()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-execfile.html">execfile()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-issubclass.html">issubclass()</a></td><td><a href="https://www.runoob.com/python/python-func-print.html">print()</a></td><td><a href="https://www.runoob.com/python/python-func-super.html">super()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-bin.html">bin()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-file.html">file()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-iter.html">iter()</a></td><td><a href="https://www.runoob.com/python/python-func-property.html">property()</a></td><td><a href="https://www.runoob.com/python/att-tuple-tuple.html">tuple()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-bool.html">bool()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-filter.html">filter()</a></td><td align="left"><a href="https://www.runoob.com/python/att-string-len.html">len()</a></td><td><a href="https://www.runoob.com/python/python-func-range.html">range()</a></td><td><a href="https://www.runoob.com/python/python-func-type.html">type()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-bytearray.html">bytearray()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-float.html">float()</a></td><td align="left"><a href="https://www.runoob.com/python/att-list-list.html">list()</a></td><td><a href="https://www.runoob.com/python/python-func-raw_input.html">raw_input()</a></td><td><a href="https://www.runoob.com/python/python-func-unichr.html">unichr()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-callable.html">callable()</a></td><td align="left"><a href="https://www.runoob.com/python/att-string-format.html">format()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-locals.html">locals()</a></td><td><a href="https://www.runoob.com/python/python-func-reduce.html">reduce()</a></td><td>unicode()</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-chr.html">chr()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-frozenset.html">frozenset()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-long.html">long()</a></td><td><a href="https://www.runoob.com/python/python-func-reload.html">reload()</a></td><td><a href="https://www.runoob.com/python/python-func-vars.html">vars()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-classmethod.html">classmethod()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-getattr.html">getattr()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-map.html">map()</a></td><td><a href="https://www.runoob.com/python/python-func-repr.html">repr()</a></td><td><a href="https://www.runoob.com/python/python-func-xrange.html">xrange()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/func-number-cmp.html">cmp()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-globals.html">globals()</a></td><td align="left"><a href="https://www.runoob.com/python/func-number-max.html">max()</a></td><td><a href="https://www.runoob.com/python/att-list-reverse.html">reverse()</a></td><td><a href="https://www.runoob.com/python/python-func-zip.html">zip()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-compile.html">compile()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-hasattr.html">hasattr()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-memoryview.html">memoryview()</a></td><td><a href="https://www.runoob.com/python/func-number-round.html">round()</a></td><td><a href="https://www.runoob.com/python/python-func-__import__.html"><strong>import</strong>()</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-complex.html">complex()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-hash.html">hash()</a></td><td align="left"><a href="https://www.runoob.com/python/func-number-min.html">min()</a></td><td><a href="https://www.runoob.com/python/python-func-set.html">set()</a></td><td></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-delattr.html">delattr()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-help.html">help()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-next.html">next()</a></td><td><a href="https://www.runoob.com/python/python-func-setattr.html">setattr()</a></td><td></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-dict.html">dict()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-hex.html">hex()</a></td><td align="left">object()</td><td><a href="https://www.runoob.com/python/python-func-slice.html">slice()</a></td><td></td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-dir.html">dir()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-id.html">id()</a></td><td align="left"><a href="https://www.runoob.com/python/python-func-oct.html">oct()</a></td><td><a href="https://www.runoob.com/python/python-func-sorted.html">sorted()</a></td><td><a href="https://www.runoob.com/python/python-func-exec.html">exec 内置表达式</a></td></tr></tbody></table><h3 id="6-6-1sorted函数"><a href="#6-6-1sorted函数" class="headerlink" title="6.6.1sorted函数"></a>6.6.1sorted函数</h3><ul><li>sorted函数对字符串，列表，元组，字典等对象进行排序操作。</li><li>sort是应用在list.上的方法，sorted可以对 更多的数据类型进行排序操作。</li><li>即便都是对列表操作，list的sort方 法返回的是对已经存在的列表进行操作，而内建函数sorted返回的是一个新的list,而不是在原来的基础上进行的操作。</li></ul><p>语法</p><p>sorted(iterable[,key[, reverse]])<br>iterable -序列，如字符串，列表，元组等。<br>key-函数，缺省为空<br>reverse –排序规则<br>reverse = True降序，reverse = False升序(默认)。</p><p>表格排序</p><table><thead><tr><th align="center">姓名</th><th align="center">分数</th><th align="center">年龄</th></tr></thead><tbody><tr><td align="center">江幸</td><td align="center">89</td><td align="center">15</td></tr><tr><td align="center">方鹏</td><td align="center">80</td><td align="center">14</td></tr><tr><td align="center">陈可</td><td align="center">85</td><td align="center">14</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;students = [(江幸<span class="string">&#x27;,89, 15), (&#x27;</span>方鹏<span class="string">&#x27;,80, 14), (&#x27;</span>陈可，<span class="number">85</span>, <span class="number">14</span>)]</span><br><span class="line"><span class="comment">#第二个分量是成绩，第三个分量是年龄</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">sorted</span>(students, key=<span class="keyword">lambda</span> s: s[<span class="number">2</span>]))</span><br><span class="line"><span class="comment">#按年龄从小到大排序</span></span><br><span class="line">[(<span class="string">&#x27;方鹏&#x27;</span>，<span class="number">80</span>, <span class="number">14</span>)，(陈可，<span class="number">85</span>, <span class="number">14</span>)，(江幸<span class="string">&#x27;，89, 15)]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;print(sorted(students, key=lambda s:s[1], reverse=True))</span></span><br><span class="line"><span class="string">#按成绩从大到小降序</span></span><br><span class="line"><span class="string">[(江幸&#x27;</span>，<span class="number">89</span>, <span class="number">15</span>)，(<span class="string">&#x27;陈可，85, 14)，(&#x27;</span>方鹏<span class="string">&#x27;，80, 14)]</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="6-6-2map函数"><a href="#6-6-2map函数" class="headerlink" title="6.6.2map函数"></a>6.6.2map函数</h3><ul><li>map会根据提供的函数对指定序列做映射。</li><li>map函数语法: map(function, iterable, …）</li><li>第一个参数function是对参数序列中的每一个元素调用function函数，iterable 是序列，</li><li>返回值的新列表或迭代器，每个元素是调用function函数的返回值</li></ul><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(ist(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x**<span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line"><span class="comment">#使用lambda匿名函数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]))</span><br><span class="line"><span class="comment">#提供了两个列表，对相同位置的列表数据进行相加</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">19</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-6-3zip函数"><a href="#6-6-3zip函数" class="headerlink" title="6.6.3zip函数"></a>6.6.3zip函数</h3><ul><li>zip()函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表或迭代器。</li><li>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同。</li><li>zip语法: zip([iterable, ..])<br>参数说明: iterable,… –两个或多个序列<br>返回值:返回元组列表</li></ul><p>zip函数举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(a,b)))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(a,c)))<span class="comment">#元素个数与最短的列表一致</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br></pre></td></tr></table></figure><p>字典键值互换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d=&#123;<span class="string">&#x27;blue&#x27;</span> :<span class="number">500</span>,<span class="string">&#x27;red&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;white&#x27;</span> :<span class="number">300</span>&#125; <span class="comment">#值不相同</span></span><br><span class="line">&gt;&gt;&gt;d1=<span class="built_in">dict</span>(<span class="built_in">zip</span>(d.values(),d.keys())</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(d1)</span><br><span class="line">&#123;<span class="number">500</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="number">100</span>: <span class="string">&#x27;red&#x27;</span>, <span class="number">300</span>: <span class="string">&#x27;white&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-6-4eval和exec函数"><a href="#6-6-4eval和exec函数" class="headerlink" title="6.6.4eval和exec函数"></a>6.6.4eval和exec函数</h3><ul><li>Python是一种动态语言，它包含很多含义。Python变量类型，操作的合法性检查都在动态运行中检查;运算的代码需要到运行时才能动态确定;程序结构也可以动态变化，容许动态加载新模块等。这两个函数就体现了这个特点。</li><li>eval是计算表达式，返回表达式的值。</li><li>exec可运行Python的程序，返回程序运行结果。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x,y=3,7</span><br><span class="line">&gt;&gt;&gt;eval(x+3*y-4&#x27;)</span><br><span class="line">20</span><br><span class="line">&gt;&gt;&gt;exec( print(&quot;hello world&quot; ))</span><br><span class="line">Hello world</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-6-5all和any函数"><a href="#6-6-5all和any函数" class="headerlink" title="6.6.5all和any函数"></a>6.6.5all和any函数</h3><p>all()和any()函数将可迭代的对象作为参数。<br>all函数参数都是True时，才返回True,否则返回False<br>any函数参数只要有一个为True,就返回True,参数全部是False时，返回False.</p><p>函数举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">47</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="number">1</span> <span class="keyword">if</span> n%k!=<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n)])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">思考: <span class="literal">True</span>背后的含义?</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=<span class="number">15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="number">1</span> <span class="keyword">if</span> n%k!=<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n)]) </span><br><span class="line">F alse</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([D,<span class="literal">False</span>,<span class="number">0</span>]) <span class="comment">#空 列表和0都表示False</span></span><br><span class="line">F alse</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-7程序结构"><a href="#6-7程序结构" class="headerlink" title="6.7程序结构"></a>6.7程序结构</h2><p>书的内容按照这样的层次组织:单词、句子、段落以及章。<br>代码也有类似的自底向.上的组织层次:数据类型类似于单词，语类似于句子，函数类似于段落，模块类似手章。<br>一个Python程序可以在不同文件中，这些文件是一个个模块。用import语句引入。<br>import模块名<br>模块名是另外一个Python文件的文件名,不包含扩展名,模块是可以运行的程序，<br>“import模块名”就是执千于文件名)模块名的程序</p><p><strong>引入模块中函数另一种方法</strong></p><p>from模块名import *<br>这种方法引入模块中的所有函数，调用的时候不需要再加模块名<br>from模块名import函数名<br>这种方法引入模块中的单个函数，调用的时候也不需要再加模块名</p><p>创建模块(两文件同一目录)<br>下面是triangle模块(文件名为triangle.py)</p><p>主程序是另一个文件(area.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> triangle</span><br><span class="line">a=<span class="number">12</span></span><br><span class="line">b=<span class="number">34</span> </span><br><span class="line">c=<span class="number">26</span></span><br><span class="line"><span class="built_in">print</span>(triangle. area(a,b,c))</span><br></pre></td></tr></table></figure><p>主程序是另一个文件(area.py)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> triangle</span><br><span class="line">a=<span class="number">12</span></span><br><span class="line">b=<span class="number">34</span> </span><br><span class="line">c=<span class="number">26</span></span><br><span class="line"><span class="built_in">print</span>(triangle. area(a,b,c))</span><br></pre></td></tr></table></figure><p>模块名字空间</p><p>1.“主程序”指启动一个程序的代码。包含“主程序”的模块，它的模块空间就是全局名字空间</p><p>2.模块空间中有:<br>    模块名，它是模块的文件名，但包含“主程序”的模块名是”_main”<br>    全局变量<br>    函数名</p><p>3.dir(模块名) :显示模块内容</p><p>包</p><p>我们已使用过单行代码、多行函数、独立程序以及同一目录下的多个模块。为了使Python应<br>用更具可扩展性，你可以把多个模块文件组织成目录，称之为包。包是一个目录，其中包含一组模块文件和一个init.py文件。如果模块存在于包中，使用”import 包名模块名”形式导入包中模块，用以下形式调用函数:“包名 .模块名.函数”</p><p>sys模块</p><p>​    上面的area.py和triangle.py两个 文件在同一个目录下，通过Python运行主程序area.py,<br>会引用triangle模块，执行函数area。<br>​    模块的查找路径: sys.path如不在同一目录，可用sys模块加入搜索路径后调用。</p><p>sys模块中的常用量<br>sys.argv        从程序外部向程序传递参数<br>sys.path        模块搜索路径的字符串列表<br>sys. stdin        标准输入<br>sys.stdout        标准输出<br>sys . stderr        标准错误输出<br>sys.getdefaultencoding()    获取系统当前编码</p><p>命令行参数</p><p>如何不用input()函数向程序输入值?命令行参数可以解决这个问题<br>sys.argv[0]    程序的文件名<br>sys.argv[1]    第一个参数<br>sys.argv[2]    第二个参数<br>……<br>sys.argv[n]    第n个参数</p><p>命令行参数例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">0</span>]) <span class="comment">#程序的文件名</span></span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">1</span>])<span class="comment">#被乘数</span></span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">2</span>])<span class="comment">#乘数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(sys argv[<span class="number">1</span>])*<span class="built_in">int</span>(sys.argv[<span class="number">2</span>]))</span><br><span class="line">程序执行:</span><br><span class="line">c:\&gt;python d:\mul.py <span class="number">2</span> <span class="number">6</span></span><br><span class="line">d:lmul.py</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第七章-文件"><a href="#第七章-文件" class="headerlink" title="第七章 文件"></a>第七章 文件</h1><h2 id="7-1文件读写"><a href="#7-1文件读写" class="headerlink" title="7.1文件读写"></a>7.1文件读写</h2><ul><li>计算机文件，是存储在某种长期储存设备上的一段数据流。所谓“长期储存设备”一般指磁盘、光盘、U盘等。其特点是所存信息可以长期、多次使用，不会因为断电而消失。</li><li>计算机文件可分为二种:二进制文件和文本文件</li><li>图形文件及文字处理程序等计算机程序都属于二进制文件。这些文件含有特殊的格式及计算机代码。</li><li>文本文件则是可以用文字处理程序阅读的简单文本文件。</li></ul><h3 id="7-1-1文件读写步骤"><a href="#7-1-1文件读写步骤" class="headerlink" title="7.1.1文件读写步骤"></a>7.1.1文件读写步骤</h3><ol><li>打开文件</li><li>处理数据</li><li>关闭文件</li></ol><h3 id="7-1-2显示文件内容"><a href="#7-1-2显示文件内容" class="headerlink" title="7.1.2显示文件内容"></a>7.1.2显示文件内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">textFile = <span class="built_in">open</span>(<span class="string">&quot;7-1 .txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="comment">#以文本方式打开</span></span><br><span class="line">t=textFile.readline()</span><br><span class="line"><span class="built_in">print</span>(t) </span><br><span class="line">textFile.close()</span><br><span class="line">binFile = <span class="built_in">open</span>(<span class="string">&quot;7-1 .txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="comment">#以二进制方式打开</span></span><br><span class="line">b=binFile.readline()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">binFile.close()</span><br><span class="line"></span><br><span class="line">程序输出:</span><br><span class="line">欢迎学习Python语言</span><br><span class="line"><span class="string">b&quot;xbblxb6\xd3\xad\xd1\xa7\xcf\xbOPythonlxd3\xefx</span></span><br><span class="line"><span class="string">d1\xd4&#x27;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="7-1-3open函数"><a href="#7-1-3open函数" class="headerlink" title="7.1.3open函数"></a>7.1.3open函数</h3><p>fileobj = open(filename ,mode)<br>fileobj是open( )返回的文件对象<br>filename是该文件的文件名<br>mode是指明文件类型和操作的字符串<br>mode的第-一个字母表明对其的操作。mode<br>的第二个字母是文件类型: t (可省略)代<br>表文本类型文件; b代表二进制类型文件。<br>后面的文件处理操作均以文本类型为例。</p><h3 id="7-1-4文件打开模式"><a href="#7-1-4文件打开模式" class="headerlink" title="7.1.4文件打开模式"></a>7.1.4文件打开模式</h3><table><thead><tr><th align="center">文件打开模式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">“r”</td><td align="center">只读模式(默认)</td></tr><tr><td align="center">“w”</td><td align="center">覆盖写模式(不存在则新创建;存在则重写新内容)</td></tr><tr><td align="center">“a”</td><td align="center">追加模式(不存在则新创建;存在则只追加内容)</td></tr><tr><td align="center">“x”</td><td align="center">创建写模式(不存在则新创建;存在则出错)</td></tr><tr><td align="center">“+”</td><td align="center">与r/w/a/x一一起使用，增加读写功能</td></tr><tr><td align="center">“t”</td><td align="center">文本类型</td></tr><tr><td align="center">“b”</td><td align="center">二进制类型</td></tr></tbody></table><h3 id="7-1-5文件读写函数"><a href="#7-1-5文件读写函数" class="headerlink" title="7.1.5文件读写函数"></a>7.1.5文件读写函数</h3><table><thead><tr><th align="center">名称</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">open()</td><td align="center">打开文件</td></tr><tr><td align="center">read(size)</td><td align="center">从文件读取长度为size的字符串，如果未给定或为负则读取所有内容</td></tr><tr><td align="center">readline()</td><td align="center">读取整行，返回字符串</td></tr><tr><td align="center">readlines()</td><td align="center">读取所有行并返回列表</td></tr><tr><td align="center">write(s)</td><td align="center">把字符串s的内容写入文件</td></tr><tr><td align="center">writelines(s)</td><td align="center">把字符串s的内容写入文件把字符串s的内容写入文件</td></tr><tr><td align="center">seek(off, whence=0)</td><td align="center">设置文件当前位置</td></tr><tr><td align="center">tell()</td><td align="center">返回文件读写的当前位置</td></tr><tr><td align="center">close()</td><td align="center">关闭文件。关闭后文件不能再进行读写操作。</td></tr></tbody></table><h3 id="7-1-6-文件复制"><a href="#7-1-6-文件复制" class="headerlink" title="7.1.6 文件复制"></a>7.1.6 文件复制</h3><p>cj.txt文件是某班学生一门课的成绩。需要把这个文件的内容复制到“cjback. txt”文件中。<br>复制文件不需要考虑行结构，用read函数就可以了。<br>程序:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source=<span class="built_in">open</span>( <span class="string">&quot;cj.t&quot;</span>,<span class="string">&quot;r&#x27; )</span></span><br><span class="line"><span class="string">back=open(&quot;</span>cjback.txt<span class="string">&quot;,&quot;</span>w<span class="string">&quot;)</span></span><br><span class="line"><span class="string">s=source.read()</span></span><br><span class="line"><span class="string">back.write(s)</span></span><br><span class="line"><span class="string">source.close()</span></span><br><span class="line"><span class="string">back. close()</span></span><br></pre></td></tr></table></figure><h2 id="7-2多行文件读写"><a href="#7-2多行文件读写" class="headerlink" title="7.2多行文件读写"></a>7.2多行文件读写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用readlines()读写多行文件</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;score.txt&#x27;&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines(): </span><br><span class="line"><span class="built_in">print</span>(line) <span class="comment">#处理行</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="计算总评分"><a href="#计算总评分" class="headerlink" title="计算总评分"></a>计算总评分</h4><p>文件score.txt是学生学期的成绩 ，每一行代表一个学生的成绩，由笔试、平时和实验三部分构成。总评=笔试* 50%+平时25%+实验*25%</p><p><img src="/../../img/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%80%BB%E8%AF%84%E5%88%86.png" alt="Python基础学习-计算总评分"></p><h3 id="7-2-1readlines函数"><a href="#7-2-1readlines函数" class="headerlink" title="7.2.1readlines函数"></a>7.2.1readlines函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;score.t&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"> s=f.readlines()</span><br><span class="line"> <span class="built_in">print</span>(s)</span><br><span class="line">运行结果:</span><br><span class="line">[学号姓名专业笔试平时实验\n<span class="string">&#x27;, &#x27;</span><span class="number">2050921018</span></span><br><span class="line">詹延峰计算数学<span class="number">65</span> <span class="number">85</span> 76In<span class="string">&#x27;, 2050921036李小</span></span><br><span class="line"><span class="string">鹏金融学类8695 85In&#x27;</span>, <span class="string">&#x27;2050921039裴凡法经</span></span><br><span class="line"><span class="string">济学类86 95 65\n&#x27;</span>, <span class="string">&#x27;2040912116茅舒瑶社会保</span></span><br><span class="line"><span class="string">障90 95 100\n&#x27;</span>，<span class="number">2050912017</span>陈见影化学工程</span><br><span class="line"><span class="number">62</span> <span class="number">75</span> 92In<span class="string">&#x27;，2050912064梅钦钦材料科学87 95</span></span><br><span class="line"><span class="string">80\n&#x27;</span>, <span class="string">&#x27;2050109153王影平大气科学86 89 72In&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;2050151003韩平医化学工程82 99 60\n&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="7-2-2文件逐行读取"><a href="#7-2-2文件逐行读取" class="headerlink" title="7.2.2文件逐行读取"></a>7.2.2文件逐行读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;score.t&quot;</span>,<span class="string">&quot;)</span></span><br><span class="line"><span class="string">for line in f.readlines():</span></span><br><span class="line"><span class="string">print(line)</span></span><br><span class="line"><span class="string">程序输出:</span></span><br><span class="line"><span class="string">学号姓名专业笔试平时实验</span></span><br><span class="line"><span class="string">2050921018詹延峰计算数学65 85 76</span></span><br><span class="line"><span class="string">2050921036李小鹏金融学类86 95 85 </span></span><br><span class="line"><span class="string">2050921039裴凡法经济学类86 95 65</span></span><br></pre></td></tr></table></figure><h4 id="计算总评分-1"><a href="#计算总评分-1" class="headerlink" title="计算总评分"></a>计算总评分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;score.txt&#x27;&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">head=f.readline() <span class="comment">#读表头行</span></span><br><span class="line">newhead=head[:<span class="number">7</span>]+head[<span class="number">9</span>:<span class="number">18</span>]+<span class="string">&quot;+head[18:- 1]+&#x27;总评成绩&#x27;</span></span><br><span class="line"><span class="string">print(newhead)</span></span><br><span class="line"><span class="string">for line in f.readlines():</span></span><br><span class="line"><span class="string">l=line. split()</span></span><br><span class="line"><span class="string">s=round(int([3])*O. 5+int([4])*0 25+int(I[5])*0.25,2) #求总评分</span></span><br><span class="line"><span class="string">l[4]=&#x27; &#x27;+l[4] #加空格对齐</span></span><br><span class="line"><span class="string">l[5]=&#x27;  &#x27;+l[5] #加空格对齐</span></span><br><span class="line"><span class="string">print(&#x27;&#x27;.join()+&#x27;&#x27;+str(s)) #加空格对齐</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>总评成绩</p><p><img src="/../../img/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%80%BB%E8%AF%84%E5%88%862.png" alt="Python基础学习-计算总评分2"></p><h2 id="7-3输入输出重定向"><a href="#7-3输入输出重定向" class="headerlink" title="7.3输入输出重定向"></a>7.3输入输出重定向</h2><p>sys.stdin    标准输入<br>sys.stdout    标准输出<br>sys. stderr    标准错误输出<br>import sys<br>#从文件读入变为从键盘输入，改变输入源<br>s=sys.stdin.readlines()<br>print(s)</p><h3 id="7-3-1词频统计-取自pintia网站"><a href="#7-3-1词频统计-取自pintia网站" class="headerlink" title="7.3.1词频统计(取自pintia网站)"></a>7.3.1词频统计(取自pintia网站)</h3><p>请编写程序，对一段英文文本，统计其中所有不同单词的个数，以及词频最大的10%的单词。所谓“单词”， 是指由不超过80个单词字符组成的连续字符串，但长度超过15的单词将只截取保留前15个单词字符。而合法的“单词字符”为大小写字母、数字和下划线，其它字符均认为是单词分隔符。注意”单词”不区分英文大小写，例如“PAT”和“pat”被认为是同一个单词。输入给出一段非空文本，最后以符号#结尾。输入保证存在至少10个不同的单词。输出按照词频递减的顺序，按照“词频:单词的格式输出词频最大的前10%的单词。若有并列，则按递增字典序输出。</p><p><img src="/../../img/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="Python基础学习-词频统计运行结果"></p><h3 id="7-3-2输入处理"><a href="#7-3-2输入处理" class="headerlink" title="7.3.2输入处理"></a>7.3.2输入处理</h3><p>”s=sys .stdin.read()”表示重定向为键盘输入<br>输入“Ctrl-d””结束输入<br>“s[:s.find(‘#’ )]”<br>表示取输入字符串，以符号“#”结尾</p><h3 id="7-3-3产生词频字典"><a href="#7-3-3产生词频字典" class="headerlink" title="7.3.3产生词频字典"></a>7.3.3产生词频字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">set</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> strs <span class="keyword">if</span> i.isalnum()==<span class="literal">False</span> <span class="keyword">and</span> i!=<span class="string">&#x27; _&#x27;</span>]):</span><br><span class="line">strs=strs.replace(k, <span class="string">&#x27; &#x27;</span>) <span class="comment">#其它字符均认为是单词分隔符</span></span><br><span class="line"><span class="comment">#去掉空格，全部变小写，变成列表</span></span><br><span class="line">strs=strs.rstrip(<span class="string">&#x27; &#x27;</span>).lower().split() <span class="comment">#全部变小写</span></span><br><span class="line">counts=<span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strs:</span><br><span class="line">k=i[:<span class="number">15</span>]<span class="comment">#取前15个字符</span></span><br><span class="line"><span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> counts:</span><br><span class="line">counts[k]=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">counts[k]+= <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-3-4排序及输出"><a href="#7-3-4排序及输出" class="headerlink" title="7.3.4排序及输出"></a>7.3.4排序及输出</h3><p>#词频递减的顺序输出，从大到小<br>#若有并列，则按递增字典序，从小到大<br><strong>#用负数把从大到小变为从小到大</strong><br>ans=sorted(counts.items(), key=lambda x:(-x[1], x[0]))<br>print(len(counts))<br>for i in range(0,int(0. 1*len(counts)):词频最大的前10%<br>print(str(ans[j][1])+’:’+ans[i][0])</p><h1 id="第八章-类和对象"><a href="#第八章-类和对象" class="headerlink" title="第八章 类和对象"></a>第八章 类和对象</h1><h2 id="8-1基础概念"><a href="#8-1基础概念" class="headerlink" title="8.1基础概念"></a>8.1基础概念</h2><p>面向对象程序设计(Object Oriented Programming, OOP):使用==对象==进行程序设计，实现==代码复用和设计复用==，使得软件开发更高效方便。<br>对象三个要素: (id,type,value)<br>面向过程程序设计<br>面向函数程序设计</p><h3 id="8-1-1Python是面向对象语言"><a href="#8-1-1Python是面向对象语言" class="headerlink" title="8.1.1Python是面向对象语言"></a>8.1.1Python是面向对象语言</h3><p>Python是面向对象的高级动态编程语言，完全支持面向对象的基本功能，如封装、继承、多态以及对基类方法的覆盖或重写。<br>Python中对象的概念很广泛，Python中 的一切内容都是对象，除了数值、字符串、列表、元组、字典、集合、range对象等等，函数也是对象，类也是对象。</p><h3 id="8-1-2内置类（类型）和对象"><a href="#8-1-2内置类（类型）和对象" class="headerlink" title="8.1.2内置类（类型）和对象"></a>8.1.2内置类（类型）和对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例如:字符串类和字符串对象</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1=<span class="built_in">str</span>(<span class="number">123</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s1+<span class="string">&#x27; &#x27;</span>+s2)</span><br><span class="line"><span class="number">123</span> abc</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1.islower()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.isnumeric()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-1-3已学的类（类型）"><a href="#8-1-3已学的类（类型）" class="headerlink" title="8.1.3已学的类（类型）"></a>8.1.3已学的类（类型）</h3><p>类(类型)：<br>int、float、bool 、string<br>list、tuple 、dict、set<br>对象举例:<br>3, [5.7,’a’], {1:4,2:5}<br>type函数判断对象的类</p><h3 id="8-1-4类的名字空间"><a href="#8-1-4类的名字空间" class="headerlink" title="8.1.4类的名字空间"></a>8.1.4类的名字空间</h3><p>每个类有自己的名字空间，类名是空间名<br>每个对象也有自己的名字空间<br>存储在类名称空间中的名称是类的成员<br>类成员包含<br>    类属性<br>    类方法<br>右边以list类为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment">#显示类成员</span></span><br><span class="line">[<span class="string">&#x27;_add_&#x27;</span>,<span class="string">&#x27;_class_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_contains_&#x27;</span>,<span class="string">&#x27;_delattr_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_delitem_&#x27;</span>,<span class="string">&#x27;_dir_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_doc_&#x27;</span>,<span class="string">&#x27;_eq_&#x27;</span>,<span class="string">&#x27;_format_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_ge_&#x27;</span>,</span><br><span class="line">。。。。。。</span><br><span class="line"><span class="string">&#x27;append&#x27;</span>, <span class="string">&#x27;clear, &#x27;</span>copy<span class="string">&#x27;, &#x27;</span>count<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">&#x27;</span>extend<span class="string">&#x27;, &quot;index&#x27;</span>, <span class="string">&#x27;insert&#x27;</span> <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;remove&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>]</span><br><span class="line"><span class="comment">#使用list作为名字空间访问</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>.sort</span><br><span class="line">&lt;method <span class="string">&#x27;sort&#x27;</span> of <span class="string">&quot;list objects&gt;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="8-1-5类方法是类名字空间中定义的函数"><a href="#8-1-5类方法是类名字空间中定义的函数" class="headerlink" title="8.1.5类方法是类名字空间中定义的函数"></a>8.1.5类方法是类名字空间中定义的函数</h3><p>lst=[4,97,7 ,34,1]<br>lst.sort()<br>相当于:<br>list.sort(Ist)<br>list是Ist的类名<br>字典d.keys()<br>相当于:<br>dict.keys(d)</p><p>instance.method(..)<br>相当于:<br>class.method(instance…)<br>class是instance的类型</p><h3 id="8-1-6小结"><a href="#8-1-6小结" class="headerlink" title="8.1.6小结"></a>8.1.6小结</h3><p>类(class):定义属性(数据)和行为(方法)的模板，<br>实例(instance):是用类产生的对象，<br>术语对象(ob ject)和实例(instance)经常是可以互换<br>的。<br>使用圆点运算符(. )引用方法和属性<br>类有自己名字空间<br>每个对象也有自己的名字空间<br>同义词:</p><table><thead><tr><th>对象</th><th>实例</th><th>实例对象</th></tr></thead><tbody><tr><td>类</td><td>类型</td><td>类对象</td></tr><tr><td>属性</td><td>变量</td><td></td></tr><tr><td>方法</td><td>操作</td><td>函数</td></tr></tbody></table><h2 id="8-2类和对象的创建与使用"><a href="#8-2类和对象的创建与使用" class="headerlink" title="8.2类和对象的创建与使用"></a>8.2类和对象的创建与使用</h2><p>Python使用<strong>class</strong>关键字来定义类，class关键字之 后是一个空格，然后是类的名字，再然后是一个冒号，最后换行并定义类的内部实现。<br>Python定义类方法:<br><strong>class</strong>类名(参数):                                        <strong>def</strong> 函数名(参数):<br>initializer                                                            函数块<br>methods</p><h3 id="8-2-1Student类和对象"><a href="#8-2-1Student类和对象" class="headerlink" title="8.2.1Student类和对象"></a>8.2.1Student类和对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span><span class="comment">#学生类:包含成员变量和成员方法</span></span><br><span class="line">def_init_ (self,mname,mnumber): <span class="comment">#构造方法</span></span><br><span class="line">self.name = mname<span class="comment">#成员变量</span></span><br><span class="line">self.number = mnumber</span><br><span class="line">self.Course_Grade= &#123;</span><br><span class="line">self.GPA=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInfo</span>(<span class="params">self</span>):</span><span class="comment">#成员方法</span></span><br><span class="line"><span class="built_in">print</span>(self.name, self.number)</span><br><span class="line">sl = Student(<span class="string">&quot;wang&quot;</span>,<span class="string">&quot;317000010&quot;</span>) <span class="comment">#创建s1对象</span></span><br><span class="line">sl.getInfoO</span><br><span class="line"><span class="comment">#Student. getInfo(s1 )</span></span><br><span class="line">s2=Student( <span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;317000011&quot;</span>)<span class="comment">#创建s2对象</span></span><br><span class="line">s2.getInfoO</span><br></pre></td></tr></table></figure><h3 id="8-2-2Student类和s1对象的名字空间"><a href="#8-2-2Student类和s1对象的名字空间" class="headerlink" title="8.2.2Student类和s1对象的名字空间"></a>8.2.2Student类和s1对象的名字空间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(Student)</span><br><span class="line">[<span class="string">&#x27;_class_&#x27;</span>,<span class="string">&#x27;_delattr_&#x27;</span>,<span class="string">&#x27;_dict_&#x27;</span>,<span class="string">&#x27;_dir_&#x27;</span>,<span class="string">&#x27;_doc_&#x27;</span>,<span class="string">&#x27;_eq_&#x27;</span></span><br><span class="line"><span class="string">&#x27;_format_&#x27;</span>,<span class="string">&#x27;_ge_&#x27;</span>,<span class="string">&#x27;_getattribute_&#x27;</span>,<span class="string">&#x27;_gt_&#x27;</span>,<span class="string">&#x27;_hash_&#x27;</span>,<span class="string">&#x27;_init_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_init_subclass_&#x27;</span>,<span class="string">&#x27;_le_&#x27;</span>,<span class="string">&#x27;_It_&#x27;</span>,<span class="string">&#x27;_module_&#x27;</span>,<span class="string">&#x27;_ne_&#x27;</span>,<span class="string">&#x27;_new_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_reduce_&#x27;</span>,<span class="string">&#x27;_reduce_ex_&#x27;</span>,<span class="string">&#x27;_repr_&#x27;</span>,<span class="string">&#x27;_setattr_&#x27;</span>,<span class="string">&#x27;_sizeof_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_str_&#x27;</span>,<span class="string">&#x27;_subclasshook_&#x27;</span>,<span class="string">&#x27;_weakref_&#x27;</span>,<span class="string">&#x27;getInfo&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(s1)</span><br><span class="line">[<span class="string">&#x27;Course_Grade&#x27;</span>,<span class="string">&#x27;GPA&#x27;</span>,<span class="string">&#x27;_class_&#x27;</span>,<span class="string">&#x27;_delattr_&#x27;</span>,<span class="string">&#x27;_dict_&#x27;</span>,<span class="string">&#x27;_dir_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_doc_&#x27;</span>,<span class="string">&#x27;_eq_&#x27;</span>,<span class="string">&#x27;_format_&#x27;</span>,<span class="string">&#x27;_ge_&#x27;</span>,<span class="string">&#x27;_getattribute_&#x27;</span>,<span class="string">&#x27;_gt_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_hash_&#x27;</span>,<span class="string">&#x27;_init_&#x27;</span>,<span class="string">&#x27;_init_subclass_&#x27;</span>,<span class="string">&#x27;_le_&#x27;</span>,<span class="string">&#x27;_It_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_module_&#x27;</span>,<span class="string">&#x27;_ne_&#x27;</span>,<span class="string">&#x27;_new_&#x27;</span>,<span class="string">&#x27;_reduce_&#x27;</span>,<span class="string">&#x27;_reduce_ex_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_repr_&#x27;</span>,<span class="string">&#x27;_setattr_&#x27;</span>,<span class="string">&#x27;_sizeof_&#x27;</span>,<span class="string">&#x27;_str_&#x27;</span>,<span class="string">&#x27;_subclasshook_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_weakref_&#x27;</span>,<span class="string">&#x27;getInfo&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;number&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-2-3Student类和s1对象"><a href="#8-2-3Student类和s1对象" class="headerlink" title="8.2.3Student类和s1对象"></a>8.2.3Student类和s1对象</h3><p>上述程序定义Student类:<br>●两个方法: <em>init</em> ，get Info。<br>●实例化了s1与s2两个对象。</p><p>该类对象包括四个成员变量:name, number ，Course_ Grade, GPA;</p><h3 id="8-2-4-init-方法"><a href="#8-2-4-init-方法" class="headerlink" title="8.2.4_init_方法"></a>8.2.4_init_方法</h3><p><em>init</em> 方法 是Python类中的一种特殊方法， 方法名的开始和结束都是双下划线，该方法称为<strong>构造方法</strong>，当创建类的对象时，它被自动调用。<br>init_方法中可以声明类所产生的对象属性，并可为其赋初始值。该方法有一个特点，不能有返回值，因为它是用来构造对象的，调用后实例化了一个该类型的对象。</p><h3 id="8-2-5Self参数"><a href="#8-2-5Self参数" class="headerlink" title="8.2.5Self参数"></a>8.2.5Self参数</h3><p>类的实例方法<strong>按惯例</strong>有一个名为self的参数，并且必须是方法的<strong>第一个</strong>形参(如果有多个形参的话)，<strong>self参数代表将来要创建的对象本身</strong>。<br>在类的方法中访问实例变量(数据成员)时需要以self为前缀。<br>在外部通过<strong>对象</strong>调用对象方法时并<strong>不需要</strong>传递这个参数，如果<br>在外部通过<strong>类</strong>调用对象方法则<strong>需要</strong>显式为self参数传值。</p><h3 id="8-2-6创建对象"><a href="#8-2-6创建对象" class="headerlink" title="8.2.6创建对象"></a>8.2.6创建对象</h3><p>定义了类之后，可以用来实例化对象，并通过“对象名.成员”的方式来访问其中的数据成员或方法成员。<br>s1 = Student( “ji”，”100001”)<br>s1. getInfo()<br>在Python中，可以使用内置方法isinstance()来测<br>试一个对象是否为某个类的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">is</span> instance(s1, Student)</span><br><span class="line"><span class="literal">True</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(s1, <span class="built_in">str</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="8-3使用对象编写程序"><a href="#8-3使用对象编写程序" class="headerlink" title="8.3使用对象编写程序"></a>8.3使用对象编写程序</h2><p><strong>例8-1:计算身体质量指数BMI</strong><br>BMI是根据体重和身高来衡量健康<br>一种方法。通过以千克为单位的体重除以以米为单位的身高的平方计算出BMI。下面是中国16岁以上人群的BMI图表:</p><p>构造函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMI</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span> <span class="title">init_</span> (<span class="params">self, name, age, weight, height</span>):</span></span><br><span class="line"><span class="comment">#构造方法，创建对象时调用</span></span><br><span class="line">self._name = name</span><br><span class="line">self._age = age</span><br><span class="line">self._weight = weight</span><br><span class="line">self._ height = height</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBMI</span>(<span class="params">self</span>):</span> <span class="comment">#计算BMI</span></span><br><span class="line">bmi= self._ weight / (self._ height</span><br><span class="line">self._height )</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">round</span>(bmi * <span class="number">100</span>)/ <span class="number">100</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>getStatus(self)方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStatus</span>(<span class="params">self</span>):</span></span><br><span class="line">bmi = self.getBMI()</span><br><span class="line"><span class="keyword">if</span> bmi&lt;<span class="number">18.5</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;偏瘦&quot;</span></span><br><span class="line"><span class="keyword">elif</span> bmi &lt; <span class="number">24</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;正常&quot;</span></span><br><span class="line"><span class="keyword">elif</span> bmi &lt; <span class="number">30</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;偏胖&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;肥胖&quot;</span></span><br></pre></td></tr></table></figure><p>其他方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getName</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> self. name</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAge</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> self._ age</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWeight</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> self._ weight</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHeight</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> self.__ height</span><br></pre></td></tr></table></figure><p>创建对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">bmi1 = BMI(<span class="string">&quot;赵四&quot;</span>，<span class="number">18</span>, <span class="number">70</span>, <span class="number">1.75</span>)</span><br><span class="line"><span class="built_in">print</span>( bmi1.getName(), <span class="string">&quot;的BMI是&quot;</span>，</span><br><span class="line">bmi1.getBMl(), bmi1.getStatus())</span><br><span class="line">bmi2 = BMI(<span class="string">&quot;王超&quot;</span>，<span class="number">38</span>, <span class="number">75</span>, <span class="number">1.70</span>)</span><br><span class="line"><span class="built_in">print</span>( bmi2 getName(), <span class="string">&quot;的BMI是&quot;</span>，</span><br><span class="line">bmi2.getBMl(), bmi2.getStatus())</span><br><span class="line">main() <span class="comment"># Call the main function</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设计向量类<br>设计一个三维向量<strong>类</strong>，并实现向量的加法、减法以及向量与标量的乘法和除法运算</p><p>向量类方法（1）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vecter3</span>:</span></span><br><span class="line">def_init_ (self, x=<span class="number">0</span>, y=<span class="number">0</span>, z=<span class="number">0</span>):<span class="comment">#构造方法</span></span><br><span class="line">self.X = x</span><br><span class="line">self.Y = y</span><br><span class="line">self.Z = z</span><br><span class="line">def_add_ (self, n): <span class="comment">#加法</span></span><br><span class="line">r = Vecter30</span><br><span class="line">r.X = self.X + n.X</span><br><span class="line">r.Y= self.Y + n.Y</span><br><span class="line">r.Z= self.Z + n.Z</span><br><span class="line"><span class="keyword">return</span> r </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>向量类方法（2）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def_sub_ (self, n): <span class="comment">#减法</span></span><br><span class="line">r = Vecter3()</span><br><span class="line">r.X = self.X - n.X</span><br><span class="line">r.Y = self.Y -n.Y</span><br><span class="line">r.Z= self.Z- n.Z</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">def_mul_ (self, n): <span class="comment">#乘法</span></span><br><span class="line">r = Vecter3()</span><br><span class="line">r.X= self.X* n</span><br><span class="line">r.Y=self.Y* n</span><br><span class="line">r.Z= self.Z * n</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def_truediv_ (self,n): <span class="comment">#除</span></span><br><span class="line">r = Vecter3()</span><br><span class="line">r.X =self.X/ n</span><br><span class="line">r:Y = self.Y / n</span><br><span class="line">r.Z= self.Z/ n</span><br><span class="line">returm r</span><br><span class="line">def_floordiv_ (self, n): <span class="comment">#整除</span></span><br><span class="line">r = Vecter3()</span><br><span class="line">r.X =self.X // n</span><br><span class="line">r.Y = selfY // n</span><br><span class="line">r.Z= self.Z// n</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span> <span class="comment">#打印向量值</span></span><br><span class="line"><span class="built_in">print</span>((self.X,self.Y,self.Z))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add3</span>(<span class="params">self</span>):</span></span><br><span class="line">selE.X二selfX + <span class="number">3</span></span><br><span class="line">seLEY = selfY + <span class="number">3</span></span><br><span class="line">selE.Z= self.Z + <span class="number">3</span></span><br><span class="line">v1 = Vecter3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) </span><br><span class="line">v2 = Vecter3(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">v3=v1+v2 </span><br><span class="line">v3.show0</span><br><span class="line">v4=v1-v2</span><br><span class="line">v4.show0</span><br><span class="line">v5 =v1 *<span class="number">3</span></span><br><span class="line">v5.show0</span><br><span class="line">v6=v1/<span class="number">2</span></span><br><span class="line">v6.show0</span><br><span class="line">v1.add3O</span><br><span class="line">v1.show0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-4封装"><a href="#8-4封装" class="headerlink" title="8.4封装"></a>8.4封装</h2><h3 id="8-4-1定义"><a href="#8-4-1定义" class="headerlink" title="8.4.1定义"></a>8.4.1定义</h3><ul><li>将数据和对数据的操作组合起来构成类，类是一个<br>不可分割的独立单位</li><li>类中既要提供与外部联系的接口，同时又要尽可能<br>隐藏类的实现细节。</li><li>Python类中成员分为数据(变量、属性)成员和<br>方法(函数)成员。</li></ul><h3 id="8-4-2方法和属性类型"><a href="#8-4-2方法和属性类型" class="headerlink" title="8.4.2方法和属性类型"></a>8.4.2方法和属性类型</h3><p>Python类中成员:<br>●数据成员(变量、属性)<br>    类数据成员<br>    实例数据成员<br>方法(函数)<br>    实例方法:公有<br>                    私有:方法名以下划线’__’开头<br>    类方法:@classmethod<br>    静态方法: @staticmethod</p><h3 id="8-4-3Python社团约定"><a href="#8-4-3Python社团约定" class="headerlink" title="8.4.3Python社团约定"></a>8.4.3Python社团约定</h3><p>在Python中，以下划线开头的方法名和变量名有特殊的含义，<br>尤其是在类的定义中。<br>➢XXX:当做内部名，不应该在外部使用，<br>➢不能用’from module import *导入;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_XXX: 解释器会换名，不能使用对象直接访问到这个成员。</span><br><span class="line">_XXX_ :系统定义的特殊成员;不要创建这种标识符</span><br></pre></td></tr></table></figure><p>改名和创建新变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">def_ init_ (self):</span><br><span class="line">self.x = <span class="number">1</span></span><br><span class="line">self.y=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getY</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> self._ y</span><br><span class="line">a=A()</span><br><span class="line">a. y =<span class="number">45</span></span><br><span class="line"><span class="built_in">print</span>(a.getY())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类成员变量与实例成员变量<br>■<strong>实例的成员变量</strong>一般是指在构造方法_ init_ ()中定义的， 定义和使用时以self作为前缀<br>■<strong>类的成员变量</strong>是在类中所有方法之外定义的<br>■<strong>特性</strong>:在主程序中(或类的外部)，<strong>实例变量属于实例(对象)，只能通过对象</strong><br><strong>名访问</strong>;而<strong>类变量属于类，可以通过类名或对象名可以访问</strong>。</p><p>类成员与实例成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">price = <span class="number">100000</span> <span class="comment">#定义类成员变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_</span> (<span class="params">self, c</span>):</span></span><br><span class="line">self.color= C<span class="comment">#定义实例成员变量</span></span><br><span class="line">carl = Car(<span class="string">&quot;Red&quot;</span>)<span class="comment">#实例化对象</span></span><br><span class="line">car2 = Car(<span class="string">&quot;Blue&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(carl .color, Car.price) <span class="comment"># 查看实例变量和类变量的值</span></span><br><span class="line">Car.price = <span class="number">110000</span><span class="comment">#修改类变量</span></span><br><span class="line">Car.name= <span class="string">&#x27;QQ&#x27;</span><span class="comment">#动态增加类变量</span></span><br><span class="line">carl .color = <span class="string">&quot;Yellow&quot;</span><span class="comment">#修改实例变量</span></span><br><span class="line"><span class="built_in">print</span>( car2.color, Car.price, Car.name)</span><br><span class="line"><span class="built_in">print</span>(car1 .color, Car.price, Car.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-4-4Car类和Car1对象的名字空间"><a href="#8-4-4Car类和Car1对象的名字空间" class="headerlink" title="8.4.4Car类和Car1对象的名字空间"></a>8.4.4Car类和Car1对象的名字空间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(Student)</span><br><span class="line">[<span class="string">&#x27;_class_&#x27;</span>,<span class="string">&#x27;_delattr_&#x27;</span>,<span class="string">&#x27;_dict_&#x27;</span>,<span class="string">&#x27;_dir_&#x27;</span>,<span class="string">&#x27;_doc_&#x27;</span>,<span class="string">&#x27;_eq_&#x27;</span></span><br><span class="line"><span class="string">&#x27;_format_&#x27;</span>,<span class="string">&#x27;_ge_&#x27;</span>,<span class="string">&#x27;_getattribute_&#x27;</span>,<span class="string">&#x27;_gt_&#x27;</span>,<span class="string">&#x27;_hash_&#x27;</span>,<span class="string">&#x27;_init_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_init_subclass_&#x27;</span>,<span class="string">&#x27;_le_&#x27;</span>,<span class="string">&#x27;_It_&#x27;</span>,<span class="string">&#x27;_module_&#x27;</span>,<span class="string">&#x27;_ne_&#x27;</span>,<span class="string">&#x27;_new_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_reduce_&#x27;</span>,<span class="string">&#x27;_reduce_ex_&#x27;</span>,<span class="string">&#x27;_repr_&#x27;</span>,<span class="string">&#x27;_setattr_&#x27;</span>,<span class="string">&#x27;_sizeof_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_str_&#x27;</span>,<span class="string">&#x27;_subclasshook_&#x27;</span>,<span class="string">&#x27;_weakref_&#x27;</span>,<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(s1)</span><br><span class="line">[<span class="string">&#x27;_class_&#x27;</span>,<span class="string">&#x27;_delattr_&#x27;</span>,<span class="string">&#x27;_dict_&#x27;</span>,<span class="string">&#x27;_dir_&#x27;</span>,<span class="string">&#x27;_doc_&#x27;</span>,<span class="string">&#x27;_eq_&#x27;</span></span><br><span class="line"><span class="string">&#x27;_format_&#x27;</span>,<span class="string">&#x27;_ge_&#x27;</span>,<span class="string">&#x27;_getattribute_&#x27;</span>,<span class="string">&#x27;_gt_&#x27;</span>,<span class="string">&#x27;_hash_&#x27;</span>,<span class="string">&#x27;_init_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_init_subclass_&#x27;</span>,<span class="string">&#x27;_le_&#x27;</span>,<span class="string">&#x27;_It_&#x27;</span>,<span class="string">&#x27;_module_&#x27;</span>,<span class="string">&#x27;_ne_&#x27;</span>,<span class="string">&#x27;_new_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_reduce_&#x27;</span>,<span class="string">&#x27;_reduce_ex_&#x27;</span>,<span class="string">&#x27;_repr_&#x27;</span>,<span class="string">&#x27;_setattr_&#x27;</span>,<span class="string">&#x27;_sizeof_&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_str_&#x27;</span>,<span class="string">&#x27;_subclasshook_&#x27;</span>,<span class="string">&#x27;_weakref_&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;price&#x27;</span>]</span><br></pre></td></tr></table></figure><p>练习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">price = <span class="number">300000</span><span class="comment">#定义类变量</span></span><br><span class="line">def_init_ (self, name):</span><br><span class="line">self.name=name<span class="comment">#定义实例变量</span></span><br><span class="line">self.color=<span class="string">&quot;&quot;</span><span class="comment">#存储汽车颜色</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setColor</span>(<span class="params">self,color</span>):</span> <span class="comment">#设置 汽车的颜色</span></span><br><span class="line">self.color = color</span><br><span class="line">car1 = Ca<span class="string">r&quot;奥迪&quot;</span>)<span class="comment">#创建car1对象</span></span><br><span class="line">car2 = Car(<span class="string">&quot;宝马&quot;</span>)<span class="comment">#创建car2对象</span></span><br><span class="line"><span class="built_in">print</span>(car1.name, Car.price)<span class="comment">#打印实例变量和类变量的值</span></span><br><span class="line">Car.price = <span class="number">310000</span><span class="comment">#修改类变量</span></span><br><span class="line">car1 setColor ( <span class="string">&#x27;黑色&#x27;</span>)<span class="comment">#car1的汽车型号为QQ</span></span><br><span class="line">car1. name = <span class="string">&quot;新奥迪&quot;</span><span class="comment">#修改实例变量</span></span><br><span class="line"><span class="built_in">print</span>(car1 .name, Car.price, car1 .color)</span><br><span class="line"><span class="built_in">print</span>(car2 name, Car.price, car2 color)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类方法（class method)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">类方法会作用于整个类，对类作出的任何改变会对它的所</span><br><span class="line">肴实偷对象产生影响。，</span><br><span class="line"><span class="comment">#打印对象的个数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">def_init_ ( self):</span><br><span class="line">A. count+= <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exclaim</span>(<span class="params"> self</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是A!&quot;</span>)</span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kids</span>(<span class="params">cls</span>):</span><span class="comment">#cls是class缩写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;A有&quot;</span> ,cls.count,<span class="string">&quot;个对象&quot;</span>)</span><br><span class="line">one = A()</span><br><span class="line">two = A()</span><br><span class="line">three= A()</span><br><span class="line">A.kids()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-4-5Pass语句作用"><a href="#8-4-5Pass语句作用" class="headerlink" title="8.4.5Pass语句作用"></a>8.4.5Pass语句作用</h3><p>Python提供了个关键字“pass”, 类似于空语句，可以用在类和函数的定义中或者选择结构中。当暂时没有确定如何实现功能，或者为以后的软件升级预留空间，或者其他类型功能时，可以使用该关键字来“占位”.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class A:</span><br><span class="line">pass</span><br><span class="line">&gt;&gt;&gt; def demoQ):</span><br><span class="line">pass</span><br><span class="line">&gt;&gt;&gt; if 5&gt;3:</span><br><span class="line">pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-4-6成员的输入显示"><a href="#8-4-6成员的输入显示" class="headerlink" title="8.4.6成员的输入显示"></a>8.4.6成员的输入显示</h3><ul><li>在IDL E环境中，在对象或类名后面加上一个圆点“.”，稍等则会自动列出其<br>所有公开成员，模块也具有同样的用法。</li><li>如果在圆点“.”后面再加一个下划线“_”，则会列出该对象、类或模块的所<br>有成员，包括私有成员。</li></ul><h2 id="8-5类的继承和多态"><a href="#8-5类的继承和多态" class="headerlink" title="8.5类的继承和多态"></a>8.5类的继承和多态</h2><p>一个类通过继承成新的类<br>扩展list类，增加随机选取功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mylit</span>(<span class="params">lis</span>):</span> <span class="comment">#list是父类名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> random.choice(self)</span><br><span class="line">lst=Mylist(<span class="string">&quot;good moring&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst.choice()</span><br></pre></td></tr></table></figure><p>super函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Car():</span><br><span class="line">price = 300000#定义类变量</span><br><span class="line">def_init_ (self, name):</span><br><span class="line">self.name=name#定义实例变量</span><br><span class="line">self.color = &quot;&quot;#存储汽车颜色</span><br><span class="line">def setColor(self,color):#设置汽车的颜色</span><br><span class="line">self. color = color</span><br><span class="line">class ECar(Car):</span><br><span class="line">def_init_ (self,name):</span><br><span class="line">super().__ init_ (name) #初始化父类的属性</span><br><span class="line">self.battery_ size = 300</span><br><span class="line">def getEcar(self):</span><br><span class="line">print(&quot;我是电动汽车&quot;+self.name+ &quot;电瓶容量为&quot;+</span><br><span class="line">str(self. battery_ size)</span><br><span class="line">+&quot;公里&quot;)</span><br><span class="line">car=ECar&quot;曹操专车&quot;)</span><br><span class="line">car.getEcar()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多态</p><p>python的多态性是指具有不同功能的运算符(函数)可以使用相同的符号，这样就可以用一个符号调用不同的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">12</span>+<span class="number">6</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;12&#x27;</span>+<span class="string">&#x27;6&#x27;</span></span><br><span class="line"><span class="string">&#x27;126&#x27;</span></span><br></pre></td></tr></table></figure><p>运算符是方法，也是函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>+<span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">3</span>)._add_ (<span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>._ </span><br><span class="line">_add_ (<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>运算符重载（1）</p><p><img src="/../../img/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD.png" alt="Python基础学习-运算符重载"></p><p>运算符重载（2）</p><p><img src="/../../img/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD2.png" alt="Python基础学习-运算符重载2"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用PS处理不规则图形面积</title>
      <link href="/2022/05/09/%E7%94%A8PS%E5%A4%84%E7%90%86%E4%B8%8D%E8%A7%84%E5%88%99%E5%9B%BE%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
      <url>/2022/05/09/%E7%94%A8PS%E5%A4%84%E7%90%86%E4%B8%8D%E8%A7%84%E5%88%99%E5%9B%BE%E5%BD%A2%E9%9D%A2%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="用PS处理不规则图形面积"><a href="#用PS处理不规则图形面积" class="headerlink" title="用PS处理不规则图形面积"></a>用PS处理不规则图形面积</h1><h2 id="一-单位统一"><a href="#一-单位统一" class="headerlink" title="一 单位统一"></a>一 单位统一</h2><p><img src="/../img/PS%E6%AD%A5%E9%AA%A41.png" alt="PS步骤1"></p><p><img src="/../img/PS%E6%AD%A5%E9%AA%A42.png" alt="PS步骤2"></p><p>单位选择测量的单位</p><h2 id="二-多边形套索工具"><a href="#二-多边形套索工具" class="headerlink" title="二 多边形套索工具"></a>二 多边形套索工具</h2><p>套索工具，选取检测区域</p><h2 id="三-色彩范围"><a href="#三-色彩范围" class="headerlink" title="三 色彩范围"></a>三 色彩范围</h2><p>点击菜单栏【选择】中的【色彩范围】</p><p><img src="/../img/PS%E6%AD%A5%E9%AA%A43.png" alt="PS步骤3"></p><p>颜色容差设置为135~140 鼠标显示吸管模式 点击图片中的区域</p><p><img src="/../img/PS%E6%AD%A5%E9%AA%A44.png" alt="PS步骤4"></p><h2 id="四-直方图"><a href="#四-直方图" class="headerlink" title="四 直方图"></a>四 直方图</h2><p>选择【窗口】中的【直方图】</p><p><img src="/../img/PS%E6%AD%A5%E9%AA%A45.png" alt="PS步骤5"></p><p>可以查看像素为263172</p><p><img src="/../img/PS%E6%AD%A5%E9%AA%A46.png" alt="PS步骤6"></p><h2 id="五-图像大小"><a href="#五-图像大小" class="headerlink" title="五 图像大小"></a>五 图像大小</h2><p>选择【图像】中的【图像大小】查看图像分辨率 118.11像素/厘米</p><p><img src="/../img/PS%E6%AD%A5%E9%AA%A47.png" alt="PS步骤7"></p><p>每平方厘米有118.11*118.11=13949.9721个像素</p><p>已知总像素为263172个  所以此叶面积=263172/13949.9721=18.8654156cm²</p><p>补充：　</p><p>​        图像的最小单位是像素<br>　　图像的分辨率是 “像素/英寸”或“像素/厘米”，我们通常所说的72的分辨率就是指 72像素/英寸，也就是说在1英寸的长度的位置包含72个像素，那1平方英寸的面积里就会有72×72＝5184个像素。</p><p>​        所以当你要计算任意图形的面积时,先要知道所求图形区域中有多少个像素，<br>​        然后算出1平方厘米中像素的数量,最后用所得出总区域像素数量除以单位面积的像素数量即可得出面积的数值。</p>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文献阅读方法</title>
      <link href="/2022/04/29/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E6%96%B9%E6%B3%95/"/>
      <url>/2022/04/29/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="文献阅读方法"><a href="#文献阅读方法" class="headerlink" title="文献阅读方法"></a>文献阅读方法</h1><h2 id="一、excel表格文献管理"><a href="#一、excel表格文献管理" class="headerlink" title="一、excel表格文献管理"></a>一、excel表格文献管理</h2><p>​    整个Excel表格包括标题、作者、文献类型、影响因子、创新点、研究方法、结论、 PDF 文件和Word总结。根据研究方向分成不同的Sheet。</p><p>​    <strong>读完文献就把它的信息总结到表格中，要注意的几点是：</strong></p><p>​    1.创新点、研究方法、结论要用自己的话进行总结，总结用中文，容易看懂。</p><p>​    2.PDF电子文献和Word总结要加到表格中，方便随时查阅。</p><p>​    3.影响因子和作者列可以加粗和标记，创新点可以填充背景色突出显示。</p><p>​    ==pdf上传步骤==</p><p>​    点击【插入】找到【附件】，把对应的文件添加到表格中就行，Word文档也按照该方法添加。</p><p>​    如果要查找或者筛选文献，只要选中搜索的关键词比如【期刊】，点击【筛选】。</p><h2 id="二、文献学习软件"><a href="#二、文献学习软件" class="headerlink" title="二、文献学习软件"></a>二、文献学习软件</h2><h3 id="1-文献翻译软件"><a href="#1-文献翻译软件" class="headerlink" title="1.文献翻译软件"></a>1.文献翻译软件</h3><h4 id="1-1CopyTranslator"><a href="#1-1CopyTranslator" class="headerlink" title="1.1CopyTranslator"></a>1.1CopyTranslator</h4><p>​    翻译引擎包括baidu/google /sogou/caiyun/tencent/youdao，查词引擎包括google/ youdao/bing。软件的上手非常的简单，只要你能把文本复制到剪切板就算可以了，也可以启用【拖拽复制】只要选中文本不用复制就可翻译其内容。</p><h4 id="1-2知云翻译"><a href="#1-2知云翻译" class="headerlink" title="1.2知云翻译"></a>1.2知云翻译</h4><p>​    学术文献翻译神器，翻译精准高效完全免费</p><h4 id="1-3有道翻译"><a href="#1-3有道翻译" class="headerlink" title="1.3有道翻译"></a>1.3有道翻译</h4><p>​    一是阅读文献时，如果对某个单词不认识，只要把鼠标放在单词上面就会翻译它的意思；</p><p>​    二是这些不懂的专业单词可以收藏到自己的单词库中，并可以设置时间定期复习。</p><h4 id="1-4grammarly"><a href="#1-4grammarly" class="headerlink" title="1.4grammarly"></a>1.4grammarly</h4><p>​    它能够检查<strong>单词拼写、纠正标点符号、修正语法错误</strong>、调整语气以及给出风格建议</p><h3 id="2-文献翻译软件"><a href="#2-文献翻译软件" class="headerlink" title="2.文献翻译软件"></a>2.文献翻译软件</h3><h4 id="2-1福晰阅读器和adobe-PDF阅读文献"><a href="#2-1福晰阅读器和adobe-PDF阅读文献" class="headerlink" title="2.1福晰阅读器和adobe PDF阅读文献"></a>2.1<strong>福晰阅读器和adobe PDF</strong>阅读文献</h4><h4 id="2-2X-mind思维导图助手"><a href="#2-2X-mind思维导图助手" class="headerlink" title="2.2X-mind思维导图助手"></a>2.2X-mind思维导图助手</h4><p>【注】文献阅读方法是搜刮网上无数师兄师姐的帖子，仅此借鉴。</p><p>记录所摘要的方法网址：</p><p><a href="https://zhuanlan.zhihu.com/p/385844382">https://zhuanlan.zhihu.com/p/385844382</a></p>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文献阅读方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMind快捷键</title>
      <link href="/2022/04/26/XMind%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/04/26/XMind%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>Ctrl+Shift+L 快捷键助手</p><p>Ctrl+Home 返回中心主题</p><p>Enter 插入主题</p><p>Tab 插入子主题</p><p>F2 编辑主题</p><p>F3 添加/编辑标签</p><p>F4 添加/编辑备注</p><p>F6 下钻</p><p>F7 截图</p><p>Shift+F6 上钻</p><p>Delete 删除</p><p>Ctrl+] 插入摘要</p><p>Ctrl+I 插入图片</p><p>Ctrl+Shift+H 插入超链接</p><p>Ctrl+1,2,3,4,5,6快速添加优先等级图标</p><p>Ctrl+B 添加外框</p><p>Ctrl+L 添加关联</p><p>Ctrl+s 保存</p><p>Ctrl++键 放大</p><p>Ctrl+F 键查找替换</p><p>展开目前分支+</p><p>收缩目前分支-</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XMind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组会汇报流程</title>
      <link href="/2022/04/22/%E7%BB%84%E4%BC%9A%E6%B1%87%E6%8A%A5%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/04/22/%E7%BB%84%E4%BC%9A%E6%B1%87%E6%8A%A5%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-本学期学习情况"><a href="#1-本学期学习情况" class="headerlink" title="1.本学期学习情况"></a>1.本学期学习情况</h2><ul><li>从开学到现在的学习状况</li></ul><h2 id="2-上周学习情况"><a href="#2-上周学习情况" class="headerlink" title="2.上周学习情况"></a>2.上周学习情况</h2><ul><li><p>文献阅读主要分为：</p><p>主要内容+特色+学习体会</p><table><thead><tr><th align="center">作者</th><th align="center">出版年</th><th align="center">来源</th><th align="center">作者单元</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>方法可行性+研究内容+结果合理+创新性</p></li></ul><h2 id="3-项目进展"><a href="#3-项目进展" class="headerlink" title="3.项目进展"></a>3.项目进展</h2><ul><li>已完成的内容+计划</li><li>写清楚具体日期</li></ul><h2 id="4-阶段计划"><a href="#4-阶段计划" class="headerlink" title="4.阶段计划"></a>4.阶段计划</h2><p>师兄推荐（统计学算法）</p>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冶金工程的理解</title>
      <link href="/2022/04/22/%E5%86%B6%E9%87%91%E5%B7%A5%E7%A8%8B%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2022/04/22/%E5%86%B6%E9%87%91%E5%B7%A5%E7%A8%8B%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-谈谈自己对冶金工程的理解"><a href="#1-谈谈自己对冶金工程的理解" class="headerlink" title="1.谈谈自己对冶金工程的理解"></a>1.谈谈自己对冶金工程的理解</h2><p>冶金工程领域是研究从矿石等资源中提取金属或金属化合物，并制成具有良好的使用性能和经济价值的材料的工程技术领域。</p><p>冶金工程包括：钢铁冶金、有色金属冶金两大类。</p><h2 id="2-钢铁的工艺"><a href="#2-钢铁的工艺" class="headerlink" title="2.钢铁的工艺"></a>2.钢铁的工艺</h2><p>高炉、转炉流程称为<strong>长流程</strong>，生产的钢称为转炉钢，它是以<a href="http://finance.sina.com.cn/money/future/quote.html?code=I0">铁矿</a>(927, 19.50, 2.15%)石和<a href="http://finance.sina.com.cn/money/future/quote.html?code=J0">焦炭</a>(4075, 109.00, 2.75%)为主要原料冶炼成铁水，再由转炉冶炼成钢；（烧结——炼铁——炼钢——轧制）</p><p>电炉流程称为<strong>短流程</strong>，生产的钢称为电炉钢，它以废钢为主要原料冶炼成钢。</p><h3 id="2-1-烧结球团"><a href="#2-1-烧结球团" class="headerlink" title="2.1 烧结球团"></a>2.1 烧结球团</h3><p>2.1.1烧结生产流程：烧结作业系将粉铁矿，各类助熔剂及细焦炭经由混拌、造粒后，经由布料系统加入烧结机，由点火炉点燃细焦炭 ，经由抽气风车抽风完成烧结反应，高热之烧结矿经破碎冷却、筛选后，送往高炉作为冶炼铁水之主要原料。</p><p>2.1.2篦机-回转窑-环冷机球团生产工艺过程主要包括以下几个部分：制煤系统、原料系统、干配系统、造球焙烧系统、润磨系统。球团生产过程可概述为：将准备好的原料（细磨精矿和添加剂等），按一定比例经过干配混匀后，进入造球系统造球，然后进入链篦机-回转窑-环冷机进行干燥、高温焙烧、冷却，直至送入成品系统。其中回转窑高温焙烧是最重要的一环，决定着球团矿的性能和产量，如上图所示。</p><p><a href="https://www.sohu.com/a/455289920_120568484">中国最全的钢铁生产工艺流程，果断收藏！_炼钢 (sohu.com)</a></p><h3 id="2-2-高铝炼铁"><a href="#2-2-高铝炼铁" class="headerlink" title="2.2 高铝炼铁"></a>2.2 高铝炼铁</h3><p>高炉生产流程：高炉作业是将铁矿石、焦炭及助熔剂由高炉顶部加入炉内，再由炉下部鼓风嘴 鼓入高温热风，产生还原气体，还原铁矿石，产生熔融铁水与熔渣之炼铁制程。</p><p><a href="https://www.sohu.com/a/455289920_120568484">中国最全的钢铁生产工艺流程，果断收藏！_炼钢 (sohu.com)</a></p><h3 id="2-3-转炉炼钢"><a href="#2-3-转炉炼钢" class="headerlink" title="2.3 转炉炼钢"></a>2.3 转炉炼钢</h3><p>转炉生产流程：炼钢厂先将熔铣送前处理站作脱硫脱磷处理，经转炉吹炼后，再依订单钢种特性及品质需求，送二次精炼处理站(RH真空脱气处理站、Ladle Injection盛桶吹射处理站、VOD真空吹氧脱碳处理站、STN搅拌站等)进行各种处理，调整钢液成份，最后送大钢胚及扁钢胚连续铸造机，浇铸成红热钢胚半成品，经检验、研磨或烧除表面缺陷，或直接送下游轧制成条钢、线材、钢板、钢卷及钢片等成品。</p><p><strong>优点</strong>：钢水纯度较高、冶炼周期较短、耗电量低。</p><p><strong>缺点</strong>：炉温较低不适合熔化难熔合金元素，炉容较大工艺柔性较差。</p><h3 id="2-4-氧气顶吹转炉炼钢法"><a href="#2-4-氧气顶吹转炉炼钢法" class="headerlink" title="2.4 氧气顶吹转炉炼钢法"></a>2.4 氧气顶吹转炉炼钢法</h3><p>氧气顶吹转炉炼钢法(LD炼钢法），从转炉顶部用喷枪把高压氧气吹入炉内从而强化炼钢过程并改善熔池搅拌的转炉炼钢工艺，是20世纪50年代产生和发展起来的炼钢技术。由于转炉炼钢速度快（炼一炉钢约10min，而平炉则需7h），负能炼钢，节约能源，故转炉炼钢成为当代炼钢的主流。 LD炼钢法一问世，便显示出巨大的优越性和强大的生命力，在全世界范围内得到迅速推广。</p><p>纯氧顶吹转炉炼钢法</p><p>　　这种方法是1952年以后发展起来的新技术，它是目前世界上采用较多也是较先进的一种方法。纯氧顶吹转炉炼钢有以下<strong>优点</strong>：</p><p>　　(i)生产速度快 由于用纯氧吹炼，就会高速降碳，快速提温，大大缩短冶炼时间。一座300t转炉吹炼时间不到20min，包括辅助工作时间在内，一共不超过1h。</p><p>　　(ii)品种多、质量好纯氧顶吹转炉既能炼普通钢，也能炼普通低碳钢。如首都钢厂采用这种方法成功地试炼了一百多种钢材。由于用纯氧吹炼，钢中氮、氢等有害气体含量较低。</p><p>　　(iii)基建投资和生产费用低 纯氧顶吹转炉的基建投资相当于同样生产量的平炉车间的60～70%，生产费用也低于平炉。</p>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冶金工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个性美化</title>
      <link href="/2022/04/20/Hexo%E4%B8%AA%E6%80%A7%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/04/20/Hexo%E4%B8%AA%E6%80%A7%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo的个性美化"><a href="#Hexo的个性美化" class="headerlink" title="Hexo的个性美化"></a>Hexo的个性美化</h1><h2 id="1-修改头像"><a href="#1-修改头像" class="headerlink" title="1.修改头像"></a>1.修改头像</h2><p>_config.butterfly.yml中找到avatar 修改图片就可以了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">img: /img/bg3.jpg effect:</span> <span class="literal">false</span> </span><br></pre></td></tr></table></figure><p>改为true头像会一直转圈</p><h2 id="2-搜索功能"><a href="#2-搜索功能" class="headerlink" title="2.搜索功能"></a><strong>2.搜索功能</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>_config.yml中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span> </span><br><span class="line"><span class="attr">path:</span> <span class="string">search.xml</span> </span><br><span class="line"><span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>_config.butterfly.yml中设置为true</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span> </span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span><span class="string">`</span></span><br></pre></td></tr></table></figure><h2 id="3-修改副标题"><a href="#3-修改副标题" class="headerlink" title="3.修改副标题"></a>3.修改副标题</h2><p>config.butterfly.yml中找到subtitle 根据自己喜好修改~</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用搏天api的隨機語錄（簡體）</span></span><br><span class="line">  <span class="comment"># source: 2  調用一言網的一句話（簡體）</span></span><br><span class="line">  <span class="comment"># source: 3  調用一句網（簡體）</span></span><br><span class="line">  <span class="comment"># source: 4  調用今日詩詞（簡體）</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># 如果有英文逗號&#x27; , &#x27;,請使用轉義字元 &amp;#44;</span></span><br><span class="line">  <span class="comment"># 如果有英文雙引號&#x27; &quot; &#x27;,請使用轉義字元 &amp;quot;</span></span><br><span class="line">  <span class="comment"># 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">要一起吗，去宇宙。</span></span><br></pre></td></tr></table></figure><h2 id="4-字数统计"><a href="#4-字数统计" class="headerlink" title="4.字数统计"></a><strong>4.字数统计</strong></h2><p>先进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>_config.butterfly.yml中找到wordcount</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wordcount (字數統計)</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="5-Butterfly添加全局吸底Aplayer"><a href="#5-Butterfly添加全局吸底Aplayer" class="headerlink" title="5.Butterfly添加全局吸底Aplayer"></a><strong>5.Butterfly添加全局吸底Aplayer</strong></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;60198&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-autoplay=&quot;true&quot;&gt;</span> <span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>以上内容复制到config.butterfly.yml中</p><p>inject bottom:中搜索aplayerInject 改为如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>搜索pjaxpjax:改为如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line">  <span class="comment"># - xxxx</span></span><br><span class="line">  <span class="comment"># - xxxx</span></span><br></pre></td></tr></table></figure><p>想要更换自己的歌单只需要在data-id= 更换歌单的id（在分享链接中会有）</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show</title>
      <link href="/2022/01/01/daima/show/"/>
      <url>/2022/01/01/daima/show/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hexo clean 清理本地缓存</p><p>hexo g = hexo generate  // 生成</p><p>hexo s = hexo server    // 运行服务器 查看本地预览效果</p><p>hexo d = hexo deploy    // 部署</p><p>hexo new post “article title”    //新建文章</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/31/hello-world/"/>
      <url>/2021/12/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
